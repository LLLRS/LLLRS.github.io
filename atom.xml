<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱生活,爱柒柒</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://9191rs.me/"/>
  <updated>2018-08-08T13:53:45.472Z</updated>
  <id>https://9191rs.me/</id>
  
  <author>
    <name>LI Ren</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySql中的索引</title>
    <link href="https://9191rs.me/posts/64683/"/>
    <id>https://9191rs.me/posts/64683/</id>
    <published>2018-08-08T11:43:37.000Z</published>
    <updated>2018-08-08T13:53:45.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询，更新数据库表中数据。索引是一种数据结构，一个索引是存储的表中一个特定列或者某几个特定列的值数据结构，索引是在列上创建的。</p><p>索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。</p><h2 id="B-Tree-原理"><a href="#B-Tree-原理" class="headerlink" title="B+ Tree 原理"></a>B+ Tree 原理</h2><p>B+ Tree 是Btree(Balance Tree)的变体，也是一种多路平衡的搜索树。B+树所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大的顺序链接，所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键字。</p><p><img src="/posts/64683/1.png" alt=""> </p><h3 id="B-Tree的查找和删除"><a href="#B-Tree的查找和删除" class="headerlink" title="B+ Tree的查找和删除"></a>B+ Tree的查找和删除</h3><p>进行查找操作时，首先在根节点进行二分查找，找到一个 key 所在的指针，然后递归地在指针所指向的节点进行查找。直到查找到叶子节点，然后在叶子节点上进行二分查找，找出 key 所对应的 data。</p><p>插入删除操作记录会破坏平衡树的平衡性，因此在插入删除时，需要对树进行一个分裂、合并、旋转等操作。</p><h3 id="为什么是B-Tree"><a href="#为什么是B-Tree" class="headerlink" title="为什么是B+ Tree"></a>为什么是B+ Tree</h3><p>红黑树等平衡树也可以用来实现索引，但是文件系统及数据库系统普遍采用 B+ Tree 作为索引结构，主要有以下两个原因：</p><ol><li>B+的磁盘读写代价更低</li></ol><p>&#8195;&#8195;B+的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。</p><ol start="2"><li>B+-tree的查询效率更加稳定</li></ol><p>&#8195;&#8195;由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</p><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><h3 id="B-Tree-索引"><a href="#B-Tree-索引" class="headerlink" title="B+Tree 索引"></a>B+Tree 索引</h3><p>B+Tree 索引是大多数 MySQL 存储引擎的默认索引类型。因为不再需要进行全表扫描，只需要对树进行搜索即可，因此查找速度快很多。除了用于查找，还可以用于排序和分组。可以指定多个列作为索引列，多个索引列共同组成键。B+Tree 索引适用于全键值、键值范围和键前缀查找，其中键前缀查找只适用于最左前缀查找。如果不是按照索引列的顺序进行查找，则无法使用索引。</p><ul><li>普通索引：最基本的索引类型，而且它没有唯一性之类的限制。</li><li>UNIQUE索引：表示唯一的，不允许重复的索引，可以为NULL值，一个表可以有多个唯一索引。</li><li>主键索引：主键是一种唯一性索引，不能为NULL值，只能有一个。</li></ul><h3 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h3><p>InnoDB 引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。哈希索引能以 O(1) 时间进行查找，但是失去了有序性，它具有以下限制：</p><ul><li>无法用于排序与分组；</li><li>只支持精确查找，无法用于部分查找和范围查找；<h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3>MyISAM 存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较是否相等。查找条件使用 MATCH AGAINST，而不是普通的 WHERE。全文索引一般使用倒排索引实现，它记录着关键词到其所在文档的映射。InnoDB 存储引擎在 MySQL 5.6.4 版本中也开始支持全文索引。</li></ul><h3 id="空间数据索引（R-Tree）"><a href="#空间数据索引（R-Tree）" class="headerlink" title="空间数据索引（R-Tree）"></a>空间数据索引（R-Tree）</h3><p>MyISAM 存储引擎支持空间数据索引，可以用于地理数据存储。空间数据索引会从所有维度来索引数据，可以有效地使用任意维度来进行组合查询。必须使用 GIS 相关的函数来维护数据。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h3><ol><li>大大减少了服务器需要扫描的数据行数。</li><li>帮助服务器避免进行排序和创建临时表（B+Tree 索引是有序的，可以用来做 ORDER BY 和 GROUP BY 操作）；</li><li>将随机 I/O 变为顺序 I/O（B+Tree 索引是有序的，也就将相邻的数据都存储在一起）。</li></ol><p>索引能够极大地提高数据检索效率，也能够改善排序分组操作的性能，但有不能忽略的一个问题就是索引是完全独立于基础数据之外的一部分数据。假设在Table ta 中的Column ca 创建了索引 idx_ta_ca，那么任何更新 Column ca 的操作，MySQL在更新表中 Column ca的同时，都须要更新Column ca 的索引数据，调整因为更新带来键值变化的索引信息。而如果没有对 Column ca 进行索引，MySQL要做的仅仅是更新表中 Column ca 的信息。这样，最明显的资源消耗就是增加了更新所带来的 IO 量和调整索引所致的计算量。此外，Column ca 的索引idx_ta_ca须要占用存储空间，而且随着 Table ta 数据量的增加，idx_ta_ca 所占用的空间也会不断增加，所以索引还会带来存储空间资源消耗的增加。</p><h3 id="索引选择原则"><a href="#索引选择原则" class="headerlink" title="索引选择原则"></a>索引选择原则</h3><ol><li>较频繁的作为查询条件的字段应该创建索引</li><li>唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件</li><li>更新非常频繁的字段不适合创建索引</li><li>不会出现在 WHERE 子句中的字段不该创建索引</li></ol><blockquote><ul><li>选择在哪个列上创建索引是最非常重要的。可以考虑使用索引的主要有 两种类型的列：在where子句中出现的列，在join子句中出现的列，而不是在SELECT关键字后选择列表的列。</li><li>索引列的基数越大(不重复的索引值)，索引的效果越好。</li><li>使用短索引(前缀索引)，如果对字符串列进行索引，应该指定一个前缀长度，可节省大量索引空间，提升查询速度。</li><li>多列索引。在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。</li></ul></blockquote><h3 id="索引选择注意事项"><a href="#索引选择注意事项" class="headerlink" title="索引选择注意事项"></a>索引选择注意事项</h3><p>既然索引可以加快查询速度，那么是不是只要是查询语句需要，就建上索引？答案是否定的。因为索引虽然加快了查询速度，但索引也是有代价的：索引文件本身要消耗存储空间，同时索引会加重插入、删除和修改记录时的负担，另外，MySQL在运行时也要消耗资源维护索引，因此索引并不是越多越好。</p><ol><li>表记录比较少，例如一两千条甚至只有几百条记录的表，没必要建索引，让查询做全表扫描就好了。</li><li>索引的选择性较低。所谓索引的选择性（Selectivity），是指不重复的索引值（也叫基数，Cardinality）与表记录数（#T）的比值：Index Selectivity = Cardinality / #T。显然选择性的取值范围为(0, 1]，选择性越高的索引价值越大，对于选择性太小的列没必要创建索引。</li><li>MySQL只对一下操作符才使用索引：&lt;,&lt;=,=,&gt;,&gt;=,between,in, 以及某些时候的like(不以通配符%或_开头的情形)。</li><li>不要过度索引，只保持所需的索引。每个额外的索引都要占用额外的磁盘空间，并降低写操作的性能。 在修改表的内容时，索引必须进行更新，有时可能需要重构，因此，索引越多，所花的时间越长。</li><li>在进行查询时，索引列不能是表达式的一部分，也不能是函数的参数，否则无法使用索引。</li></ol><hr><p>参考链接：<br>&#8195;&#8195;<a href="https://github.com/CyC2018/Interview-Notebook" target="_blank" rel="noopener">https://github.com/CyC2018/Interview-Notebook</a><br>&#8195;&#8195;<a href="https://segmentfault.com/a/1190000003072424" target="_blank" rel="noopener">https://segmentfault.com/a/1190000003072424</a><br>&#8195;&#8195;<a href="https://segmentfault.com/a/1190000004690721" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004690721</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询，更新数据库表中数据。索引是一种数据结构，一个索引是存储的表中一个特定列或者
      
    
    </summary>
    
      <category term="MySql" scheme="https://9191rs.me/categories/MySql/"/>
    
    
      <category term="索引" scheme="https://9191rs.me/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机类加载机制</title>
    <link href="https://9191rs.me/posts/40484/"/>
    <id>https://9191rs.me/posts/40484/</id>
    <published>2018-08-07T09:28:24.000Z</published>
    <updated>2018-08-07T13:35:02.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>&#8195;&#8195;虚拟机的类加载机制就是虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型。在Java语言里面，类型的加载、连 接和初始化过程都是在程序运行期间完成的，这种策略虽然会令类加载时稍微增加一些 性能开销，但是会为Java应用程序提供高度的灵活性，Java里天生可以动态扩展的语言 特性就是依赖运行期动态加载和动态连接这个特点实现的。</p><h2 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h2><p>&#8195;&#8195;类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加 载（Loading)、验证（Verification)、准备（Preparation)、解析（Resolution)、初始化 (Initialization)、使用（Using)和卸载（Unloading) 7个阶段。其中验证、准备、解析3个部分统称为连接（Linking),这7个阶段的发生顺序如下图所示。<br><img src="/posts/40484/1.jpg" alt=""></p><p>加载、验证、准备、初始化和卸载这5个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始，而解析阶段则不一定：它在某些情况下可以在初始化 阶段之后再开始，这是为了支持Java语言的运行时绑定（也称为动态绑定或晚期绑定）。但是这些阶段通常都是互相交叉地混合式进行的，通常会在一个阶段执行的过程中调用、 激活另外一个阶段。</p><p>对于加载过程， Java虚拟机规范中并没有进行强制约束，这点可以交给虚拟机的具体实现来自由把握。但是对于初始化过程，有且只有5种情况必须立即对类进行“初始化”：</p><ul><li>使用new 关键字实例化对象的时候、读取或设置一个类的静态字段（被final修饰、已在编译期把结果 放人常量池的静态宇段除外）的时候，以及调用一个类的静态方法的时候。</li><li>使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化， 则需要先触发其初始化。</li><li>初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父 类的初始化。 </li><li>当虚拟机启动时，用户需要指定一个要执行的主类（包含mainO方法的那个类），虚 拟机会先初始化这个主类。</li><li>当使用JDK1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。</li></ul><p>以上5种场景中的行为称为对一个类进行主动引用。除此之外，所有引用类的方式（被动引用）都不会触发初始化。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Father</span> &#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">       System.<span class="keyword">out</span>.println(<span class="string">"Father init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">int</span> <span class="keyword">value</span> = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Son</span> <span class="title">extends</span>  <span class="title">Father</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">       System.<span class="keyword">out</span>.println(<span class="string">"Son init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> final String HELLO = <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       Son.<span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       Father[] nums = <span class="keyword">new</span> Father[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       System.<span class="keyword">out</span>.println(Son.HELLO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用test1()方法后，输出“Father init”，而不会输出“Son init”。对于静态字段，只有直接定义这个字段的类才会被初始化，因此通过其子类来引用父类中定义的静 态字段，只会触发父类的初始化而不会触发子类的初始化。</p><p>当调用test2()方法后，没有输出 “Father init”，这说明没有触发Father类的初始化。这是因为数组类本身不通过类加载器创建，它是由Java虚拟 机直接创建的，创建数组的动作是由字节码指令newairay触发。</p><p>当调用test3()方法后，没有输出 “Son init”，这说明没有触发Father类的初始化。这是因为在编译阶段通过常量传播优化，已经将此常量的值“hello”存储到了 Test类的•常量池中，以后Test类对常量 Son.HELLO的引拥实际都被转化为Test类对自身常量池的引用。</p><h2 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h2><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>在加栽阶段，虚拟机需要完成以下3件亊情：</p><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流。</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问人口。</li></ul><p>加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，方法区中的数据存储格式由虚拟机实现自行定义，虚拟机规范未规定此区域的具体数据结构。然后在内存中实例化一个java.lang.Class类的对象（并没有明确规定是在Java堆中， 对于HotSpot虚拟机而言，Class对象比较特殊，它虽然是对象，但是存放在方法区里面）， 这个对象将作为程序访问方法区中的这些类型数据的外部接口。</p><p>加载阶段与连接阶段的部分内容（如一部分字节码文件格式验证动作）是交叉进行的，加栽阶段尚未完成，连接阶段可能已经开始，但这拽夹在加栽阶段之中进行的动作，仍然属 予连接阶段的内容，这两个阶段的开始时间仍然保持着同定的先后顺序。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含时信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致上会完成4个阶段的检验动作:文件格式验证、元数据验证、字节码验证和符号引用验证。</p><p>文件格式验证阶段要验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处 理。元数据验证阶段的主要目的是对类的元数据信息进行语义校验，保证不存在不符合Java语言规 范的元数据信息。字节码验证阶段的主要目的是通过数据流和控制流分析， 确定程序语义是合法的、符合逻辑的。符号引用验证阶段可以可以看做是对类自身以外（常量池中 的各种符号引用）的信息进行匹配性校验。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意：</p><ol><li>这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。</li><li>这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值.假设一个类变量的定义为：<br>public static int value = 3；<br>那么变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把value赋值为3的putstatic指令是在程序编译后，存放于类构造器&amp;ltclinit&amp;gt（）方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行。</li></ol><p>下图列出了Java中所有基本数据类型以及reference类型的默认零值：</p><p>   <img src="/posts/40484/2.jpg" alt=""></p><p>  这里还需要注意如下几点：</p><ul><li>对基本数据类型来说，对于类变量（static）和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认的零值，而对于局部变量来说，在使用前必须显式地为其赋值，否则编译时不通过。</li><li>对于同时被static和final修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；而只被final修饰的常量则既可以在声明时显式地为其赋值，也可以在类初始化时显式地为其赋值，总之，在使用前必须为其显式地赋值，系统不会为其赋予默认零值。</li><li>对于引用数据类型reference来说，如数组引用、对象引用等，如果没有对其进行显式地赋值而直接使用，系统都会为其赋予默认的零值，即null。</li><li>如果在数组初始化时没有对数组中的各元素赋值，那么其中的元素将根据对应的数据类型而被赋予默认的零值。</li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p><h4 id="类或接口的解析"><a href="#类或接口的解析" class="headerlink" title="类或接口的解析"></a>类或接口的解析</h4><p>假设当前代码所处的类为D,如果要把一个从未解析过的符号引用N解析为一个类或接口C的直接引用，那虚拟机完成整个解析的过程需要以下3个步骤：</p><ol><li>如果C不是一个数组类型，那虚拟机将会把代表N的全限定名传递给D的类加栽 器去加载这个类C。在加载过程中，由于元数据验证、字节码验证的需要，又可能触发其他 相关类的加载动作，例如加载这个类的父类或实现的接口 •一旦这个加载过程出现了任何异 常，解析过程就宣告失败。<br>2.如果C是一个数组类型，并且数组的元素类型为对象，也就是N的描述符会是类似 “[Ljava/lang/hiteger”的形式，那将会按照第1点的规则加载数组元素类型。如果N的描述 符如前面所假设的形式，需要加载的元素类型就是“Java.lang.Integer”，接着由虚拟机生成一 个代表此数组维度和元素的数组对象。<br>3.如果上面的步骤没有出现任何异常，那么C在虚拟机中实际上已经成为一个有效的 类或接口了，但在解析完成之前还要进行符号引用验证，确认D是否具备对C的访问权限。 如果发现不具备访问权限，将抛出java.lang.IllegalAccessError异常。</li></ol><h4 id="字段解析"><a href="#字段解析" class="headerlink" title="字段解析"></a>字段解析</h4><p>对字段进行解析时，会先在本类中查找是否包含有简单名称和字段描述符都与目标相匹配的字段，如果有，则查找结束；如果没有，则会按照继承关系从上往下递归搜索该类所实现的各个接口和它们的父接口，还没有，则按照继承关系从上往下递归搜索其父类，直至查找结束。<br>从下面一段代码的执行结果中很容易看出来字段解析的搜索顺序：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">public static int m = <span class="number">11</span>;</span><br><span class="line">static&#123;</span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">"执行了super类静态语句块"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">public static int m = <span class="number">33</span>;</span><br><span class="line">static&#123;</span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">"执行了父类静态语句块"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">static&#123;</span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">"执行了子类静态语句块"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span></span>&#123;</span><br><span class="line">public static void main(<span class="type">String</span>[] args)&#123;</span><br><span class="line"><span class="type">System</span>.out.println(<span class="type">Child</span>.m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 执行结果如下：</p><blockquote><p>  执行了super类静态语句块<br>    执行了父类静态语句块<br>    33</p></blockquote><p>如果注释掉Father类中对m定义的那一行，则输出结果如下：</p><blockquote><p>执行了super类静态语句块<br>    11</p></blockquote><p>分析如下：static变量发生在静态解析阶段，也即是初始化之前，此时已经将字段的符号引用转化为了内存引用，也便将它与对应的类关联在了一起，由于在子类中没有查找到与m相匹配的字段，那么m便不会与子类关联在一起，因此并不会触发子类的初始化。</p><h4 id="类方法解析"><a href="#类方法解析" class="headerlink" title="类方法解析"></a>类方法解析</h4><p>对类方法的解析与对字段解析的搜索步骤差不多，只是多了判断该方法所处的是类还是接口的步骤，而且对类方法的匹配搜索，是先搜索父类，再搜索接口。</p><h4 id="接口方法解"><a href="#接口方法解" class="headerlink" title="接口方法解"></a>接口方法解</h4><p>与类方法解析步骤类似，知识接口不会有父类，因此，只递归向上搜索父接口就行了。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p> 初始化是类加载过程的最后一步，到了此阶段，才真正开始执行类中定义的Java程序代码。在准备阶段，类变量已经被赋过一次系统要求的初始值，而在初始化阶段，则是根据程序员通过程序指定的主观计划去初始化类变量和其他资源，或者可以从另一个角度来表达：初始化阶段是执行类构造器&amp;ltclinit&amp;gt()方法的过程。</p><ul><li>&amp;ltclinit&amp;gt()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句中可以赋值，但是不能访问。</li><li>&amp;ltclinit&amp;gt()方法与实例构造器&amp;ltinit&amp;g()方法（类的构造函数）不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的&amp;ltclinit&amp;gt()方法执行之前，父类的&amp;ltclinit&amp;g()方法已经执行完毕。因此，在虚拟机中第一个被执行的&amp;ltclinit&amp;gt()方法的类肯定是java.lang.Object。</li><li>&amp;ltclinit&amp;gt()方法对于类或接口来说并不是必须的，如果一个类中没有静态语句块，也没有对类变量的赋值操作，那么编译器可以不为这个类生成&amp;ltclinit&amp;gt()方法。</li><li>接口中不能使用静态语句块，但仍然有类变量（final static）初始化的赋值操作，因此接口与类一样会生成&amp;ltclinit&amp;gt()方法。但是接口鱼类不同的是：执行接口的&amp;ltclinit&amp;gt()方法不需要先执行父接口的&amp;ltclinit&amp;gt()方法，只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也一样不会执行接口的&amp;ltclinit&amp;gt()方法。 </li><li>虚拟机会保证一个类的&amp;ltclinit&amp;gt()方法在多线程环境中被正确地加锁和同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的&amp;ltclinit&amp;gt()方法，其他线程都需要阻塞等待，直到活动线程执行&amp;ltclinit&amp;gt()方法完毕。如果在一个类的&amp;ltclinit&amp;gt()方法中有耗时很长的操作，那就可能造成多个线程阻塞，在实际应用中这种阻塞往往是很隐蔽的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> b = a;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClinitTest</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(Child.b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 执行上面的代码，会打印出2，也就是说b的值被赋为了2。</p></blockquote><p>首先在准备阶段为类变量分配内存并设置类变量初始值，这样A和B均被赋值为默认值0，而后再在调用&amp;ltclinit&amp;gt()方法时给他们赋予程序中指定的值。当我们调用Child.b时，触发Child的&amp;ltclinit&amp;gt()方法，根据规则2，在此之前，要先执行完其父类Father的&amp;ltclinit&amp;gt()方法，又根据规则1，在执行&amp;ltclinit&amp;gt()方法时，需要按static语句或static变量赋值操作等在代码中出现的顺序来执行相关的static语句，因此当触发执行Father的&amp;ltclinit&amp;gt()方法时，会先将a赋值为1，再执行static语句块中语句，将a赋值为2，而后再执行Child类的&amp;ltclinit&amp;gt()方法，这样便会将b的赋值为2。</p><blockquote><p>   如果我们颠倒一下Father类中“public static int a = 1;”语句和“static语句块”的顺序，程序执行后，则会打印出1。原因同上。 另外，在颠倒二者的顺序之后，如果在static语句块中对a进行访问（比如将a赋给某个变量），在编译时将会报错，因为根据规则1，它只能对a进行赋值，而不能访问。</p></blockquote><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远远不限于类 加载阶段。对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在Java虚 拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。这句话可以表达得更通 俗一些：比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有 意义，否则，即使这两个类来源于同一个Class文件，被同一个虚拟机加载，只要加载它们 的类加载器不同，那这两个类就必定不相等。这里所指的“相等’ 包括代表类的Class对象的equals()方法、isAssignableFrom()方法、 islnstance()方法的返回结果，也包括使用instanceof关键字做对象所属关系判定等情况。</p><p>站在Java虚拟机的角度来讲，只存在两种不同的类加载器：</p><ul><li>启动类加载器：它使用C++实现（这里仅限于Hotspot，也就是JDK1.5之后默认的虚拟机，有很多其他的虚拟机是用Java语言实现的），是虚拟机自身的一部分。</li><li>所有其他的类加载器：这些类加载器都由Java语言实现，独立于虚拟机之外，并且全部继承自抽象类java.lang.ClassLoader，这些类加载器需要由启动类加载器加载到内存中之后才能去加载其他的类。</li></ul><p>站在Java开发人员的角度来看，类加载器可以大致划分为以下三类：</p><ul><li>启动类加载器：Bootstrap ClassLoader，跟上面相同。它负责加载存放在JDK\jre\lib(JDK代表JDK的安装目录，下同)下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库（如rt.jar，所有的java.*开头的类均被Bootstrap ClassLoader加载）。启动类加载器是无法被Java程序直接引用的。</li><li>扩展类加载器：Extension ClassLoader，该加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载JDK\jre\lib\ext目录中，或者由java.ext.dirs系统变量指定的路径中的所有类库（如javax.*开头的类），开发者可以直接使用扩展类加载器。</li><li>应用程序类加载器：Application ClassLoader，该类加载器由sun.misc.Launcher$AppClassLoader来实现，它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li><li>自定义的类加载器。</li></ul><p>这几种类加载器的层次关系如下图所示：<br>   <img src="/posts/40484/3.jpg" alt=""></p><p> 这种层次关系称为类加载器的双亲委派模型。把每一层上面的类加载器叫做当前层类加载器的父加载器，当然，它们之间的父子关系并不是通过继承关系来实现的，而是使用组合关系来复用父加载器中的代码。该模型在JDK1.2期间被引入并广泛应用于之后几乎所有的Java程序中，但它并不是一个强制性的约束模型，而是Java设计者们推荐给开发者的一种类的加载器实现方式。</p><p> 双亲委派模型的工作流程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。</p><p>  使用双亲委派模型来组织类加载器之间的关系，有一个很明显的好处，就是Java类随着它的类加载器（说白了，就是它所在的目录）一起具备了一种带有优先级的层次关系，这对于保证Java程序的稳定运作很重要。例如，类java.lang.Object类存放在JDK\jre\lib下的rt.jar之中，因此无论是哪个类加载器要加载此类，最终都会委派给启动类加载器进行加载，这边保证了Object类在程序中的各种类加载器中都是同一个类。</p><p>此外，类加载器全盘负责机制：当一个类加载器加载一个Class的时候，这个Class所依赖的和引用的所有Class也由这个类加载器负责载入，除非是显式的使用另外一个类加载器载入。</p><hr><p>详情请参见深入理解Java虚拟机第二版<br><a href="https://blog.csdn.net/ns_code/article/details/17881581" target="_blank" rel="noopener">https://blog.csdn.net/ns_code/article/details/17881581</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&amp;#8195;&amp;#8195;虚拟机的类加载机制就是虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形
      
    
    </summary>
    
      <category term="JVM" scheme="https://9191rs.me/categories/JVM/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>垃圾收集器与内存分配策略</title>
    <link href="https://9191rs.me/posts/15805/"/>
    <id>https://9191rs.me/posts/15805/</id>
    <published>2018-08-05T07:56:06.000Z</published>
    <updated>2018-08-05T13:59:34.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p> &#8195;&#8195; Java 内存运行时区域的可分为程序计数器、虚拟机栈、本地方法栈、Java堆和方法区等5个部分，其中程序计数器、虚拟机栈、本地方法栈3个区域随线程而 生，随线程而灭；栈中的栈帧随着方法的进人和退出而有条不紊地执行着出栈和入栈操作。 每一个找帧中分配多少内存基本上是在类结构确定下来时就已知的， 因此这几个区域的内存分配和回收都具备确定性，在方法结束或者线程结束时，内存自然就跟随着回收了。而Java堆和方法区则不一 样，一个接口中的多个实现类需要的内存可能不一样，只有在程序处于运行期间时才能知道会创建哪些对象，这部分内存的分配和回收都是动态的，而垃圾收集器所关注的正是这部分内存。</p><h2 id="哪些对象需要回收"><a href="#哪些对象需要回收" class="headerlink" title="哪些对象需要回收"></a>哪些对象需要回收</h2><p> &#8195;&#8195;在堆里面存放着Java程序中几乎所有的对象，垃圾收集器在对堆进行回收前，第一 件事情就是要确定这些对象之中哪些还“存活”着，哪些已经“死去”。常见的方法有两个：引用计数算法和可达性分析算法。</p><h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h3><p> &#8195;&#8195;引用计数算法（Reference Counting）的判定方式很简单：给对象中增加一个引用计数器，每当有 一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器允 0的对象就是不可能再被使用的。一般地说，引用计数算法的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法，但是至少主流的 Java虚拟机里面没有选则引用计数算法来管理内存，其中最主要的原因是它很难解决对象之 间相互循环引用的问题。</p><pre><code> public class ReferenceCountingGC{        public Object instance = null;        private static final int _1MB = 1024 * 1024;        public static void testGC() {            ReferenceCountingGC objA = new ReferenceCountingGCO ;             ReferenceCountingGC objB = new ReferenceCountingGCO;             objA.instance = objB;             objB.instance = objA;            objA = null;             objB = null;            //假设在这行发生GC, objA和ObjB是否能被回收？            System.gc();        }        }</code></pre><p>  &#8195;&#8195; 如以上代码所示testGC()方法, 对象objA和objB都有宇段instance, 赋值令objA.instance = objB=及 objB.instance  = objA。除此之外，这两个对象再无任何引用，实际上这两个对象已经不可能再被访问，但是它们因为互相引用着方，导致它们引用计数都不为0，于是引用计数算法无法通知GC收集器回收它们。</p><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>&#8195;&#8195; 可达性分析（ReacffabilityAnaljLsisy）算法的基本思 路就是通过一系列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所通过的路径称为引用链(Reference Chain),等一个对象到GC Roots没有任何引用链相连时，则明此对象是不可用的。如 下图所示，对象object5、object6、object7虽然互相有关联，但是它们到GC Roots是不可达的，所以它们将会被判定为是对回收的对象。<br><br><img src="/posts/15805/1.jpg" alt=""><br><br><br>&#8195;&#8195; 在可达性分析箅法中不可达的对象，也并非是一定要被回收的。要真正回收一个对象，至少要经历两次标记过程。如果对象在进行可 达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。</p><p>如果这个对象被判定为有必要执行finalize()方法，那么这个对象将会放置在一个叫做 F-Queue的队列之中，并在稍后由一个由虚拟机自动建立的、低优先级的Finalizer线程去执行它,这<strong>里所谓的“执行”是指虚拟机会触发这个方法，但并不承诺会等待它运行结束</strong>。</p><p>稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize()中重新与引用链上 的任何一个对象建立关联，譬如把自己（this关键字）陚值给某个类变量或者对象的成 员变量，那在第二次标记时它将被移除出“即将回收”的集合。如果对象这时候仍然被标记， 那基本上它就真的被回收了。<br><strong>务必注意，finalize()方法都最多只会被系统自动调用一次。</strong></p><h3 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h3><p>&#8195;&#8195;方法区（或者HotSpot虚拟机中的永久代）主要回收两部分内容：废弃常量和无用的类。</p><p>回收废弃常量与回收 Java堆中的对象非常类似。以常量池中字面量的回收为例，假如一个字符串“abc”已经进 人了常量池中，但是当前系统没有任何一个String对象引用常量池中的“abc”常量，也没有其他地方引用了这个字面量，如果这 时发生内存回收，而且必要的话，这个“abc”常量就会被系统清理出常量池。常量池中的其他类（接口）、方法、字段的符号引用也与此类似。</p><p>类需要同时满足下面3个条件才能算是“无用的类”：</p><ul><li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。</li><li>加载该类的ClassLoader已经被回收。</li><li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访 问该类的方法。</li></ul><p><strong>虚拟机可以对满足上述3个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是 和对象一样，不使用了就必然会回收。</strong></p><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>&#8195;&#8195;最基础的收集算法是“标记-清除”（Marie-Sweep)算法，如同它的名字一样，算法分 为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。它的主要不足有两个：一个是效率问题，标记和清除两个过程的效率都不高；另一 个是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后 在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次 垃圾收集动作。标记—清除算法的执行过程如下图所示。<br><img src="/posts/15805/2.jpg" alt=""></p><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>&#8195;&#8195;为了解决效率问题，一种称为“复制”（Copying)的收集算法出现了，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都 是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶 指针，按顺序分配内存即可，实现简单，运行髙效。只是这种算法的代价是将内存缩小为了 原来的一半，未免太高了一点。复制算法的执行过程如下图所示。<br><img src="/posts/15805/3.jpg" alt=""></p><p>这种收集算法主要被用来回收新生代，新 生代中的对象98%是“朝生夕死”的，所以并不需要按照1 ：1的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一 块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块 Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden 和Survivor的大小比例是8 : 1,也就是每次新生代中可用内存空间为整个新生代容量的90%,只有10%的内存会被“浪费”。如果另外一块Survivor空间没有足够空间在放上一次新生代收集下来的存活对象 时，这些对象将直接通过分配担保机制进人老年代。</p><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p>&#8195;&#8195;根据老年代的特点，提出7另外一种“标记_-整理”（Mark-Compact）算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存，“标记-整理”算法的 示意图如下所示。<br><img src="/posts/15805/4.jpg" alt=""></p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>&#8195;&#8195;“分代收集”（Generational Collection)算法并没有什么新的思想，只是根据对象存活周期的不同将内存划分为几块。一般是把Java 堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代 中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付 出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间 对它进行分配担保，就必须使用“标记一清理”或者“标记一整理”算法来进行回收。</p><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>&#8195;&#8195;垃圾收集器就是内存回收的具体实现。Java 虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同的厂商、不同版本的虚 拟机所提供的垃圾收集器都可能会有很大差别，这里讨论的收集器基于JDK 1.7 Update 14之 后的HotSpot虚拟机，这个虚拟机包含的所有收集器下如图所示（如果两个收集器之间存在连线，就说明它 们可以搭配使用。）。<br><img src="/posts/15805/5.jpg" alt=""></p><h3 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h3><p>&#8195;&#8195;Serial收集器是一个单线程的收集器，它的 “单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作， 更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束（Stop The World）。下面是 Serial / Serial Old收集器运行示意图。<br><img src="/posts/15805/6.jpg" alt=""></p><p>Serial收集器的优点是简单而高效（与其他收集器的单线程比），对于限定 单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集可以 获得最高的单线程收集效率。缺点则是因内存回收而导致GC停顿。</p><h3 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h3><p>&#8195;&#8195;ParNew收集器其实就是Serial收集器的多线程版本，除了使用多条线程进行垃圾收集 之外.其余行为包括Serial收集器可用的所有控制参数、收集算法、StopTheWorld、 对象分配规则、回收策略等都与Serial收集器完全一样。ParNew / Serial Old收集器运行示意图如下。<br><img src="/posts/15805/7.jpg" alt=""></p><p>ParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于 存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分 之百地保证可以超越Serial收集器.但是，随着可以使用的CPU的数量的增加，它对于 GC时系统资源的有效利用还是很有好处的。</p><h3 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h3><p>&#8195;&#8195;Parallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行多线程收集器。Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标則是达到一个可控制的吞叶量（Throughput)。所谓吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间）。停顿时间越短就越适合需耍与用户交互的程序，良好的响应速度能提升用户体验，而 吞吐量则可以髙效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</p><p>Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记一整理”算法。这个收集器是在JDK 1.6中才开始提供的，在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。<br><img src="/posts/15805/9.jpg" alt=""></p><h3 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h3><p>&#8195;&#8195;CMS(Concurrent Mark Sweep)收集器是一秤以获取最短回收停顿时间为目标的收集器。，CMS收集器是基于”标记—清除”算法实现的，它的运作过程相分为四个步骤：</p><ul><li>初始标记</li><li>并发标记</li><li>重新标记</li><li>并发消除</li></ul><p>其中初始标记、重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快,：并.发;向己阶段就是进行GC Roots  Tracing的过程，而重新标记阶段则是为了修正并发标记期间因用户程序继续运作而导致标记产牛变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一 些，但远比并发标记的时间短。</p><p><img src="/posts/15805/10.jpg" alt=""></p><p>由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起 工作，所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。</p><p>CMS主要优点在于：并发收集和低停顿。但是CMS以下3个明显的缺点：</p><ul><li>对CPU资源非常敏感</li><li>无法处理浮动垃圾（Floating Garbage)，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生</li><li>收集结束 时，可能会有大量空间碎片产生</li></ul><h3 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h3><p>&#8195;&#8195;G1 (Garbage-First)收集器是当今收集器技术发展的最前沿成果之一，是一款面向服务端应用的垃圾收集器。与其他GC收集器相比，G1具备如 下特点。</p><ul><li><p><strong>并行与并发</strong>：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU (CPU 或者CPU核心）来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿 Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。</p></li><li><p><strong>分代收集：</strong>与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需 要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建 的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。</p></li><li><strong>空间整合:</strong> 与CMS的“标记一清理”算法不同，G1从整体来看是基于“标记一整理” 算法实现的收集器，从局部（两个Region之间）上来看是基于“复制”算法实现的， 但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，收集后能提 供规整的可用内存。这种特性有利于程序长时间运行，分配大对象时不会因为无法找 到连续内存空间而提前触发下一次GC。</li><li><strong>可预测的停顿</strong>：这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共 同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过 N毫秒。</li></ul><p>在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1不再是这 样。使用G1收集器时，Java堆的内存布局就与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region),虽然还保留有新生代和老年代的概念，但新生代和 老年代不再是物理隔离的了，它们都是一部分Region (不需要连续）的集合。G1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进#全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价値大小（回收.所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许 的收集时间，优先回收价值最大的Region。</p><p>G1收集器的运作大致可划分为以下几个步骤： </p><ul><li>初始标记</li><li>并发标记</li><li>最终标记</li><li>筛选回收</li></ul><p>初始标记阶段仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS (Next Top at Mark Start)的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，这阶段需要停顿线程，但耗时很短。</p><p>并发标记阶段是从GC Root 开始对堆中对象进行可达性分析，找出存活的对象，这阶段耗时较长，但可与用户程序并发 执行。</p><p>而最终标记阶段则是为了修正在并发标记期间因用户程序继续运作而导致标记产生变 动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程Remembered Set Logs里面， 最终标记阶段需要把Remembered Set Logs的数据合并到Remembered Set中，这阶段需要停 顿线程，但是可并行执行。</p><p>最后在筛选回收阶段首先对各个Region的回收价值和成本进行排 序，根据用户所期望的GC停顿时间来制定回收计划，</p><p><img src="/posts/15805/11.jpg" alt=""></p><h2 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h2><p>&#8195;&#8195;对象的内存分配，往大方向讲，就是在堆上分配：对象主要分配在新生代的Eden区上，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少数情况下也可能会直接分配在老年代中，分配的规则并不是百分之百固定的，其细节取决于当前使用的是哪一种垃圾收集器组合，还有虚拟机中与内存相关的参数的设置。下面是几条最普遍的内存分配规则。</p><h3 id="对象优先在Eden分配"><a href="#对象优先在Eden分配" class="headerlink" title="对象优先在Eden分配"></a>对象优先在Eden分配</h3><p>&#8195;&#8195;大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。</p><p>Minor GC和FullGC的区别：</p><ul><li>新生代GC(Minor GC): 指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝 生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。</li><li>老年代GC (Major GC/FullGC〉：指发生在老年代的GC, 出现了 Major GC,经常会伴 随至少一次的MinorGC (但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接 进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。</li></ul><h3 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h3><p>&#8195;&#8195;所谓的大对象是指，需要大量连续内存空间的Java对象，最典型的大对象就是那种很长 的字符串以及数组，经常出现大对象容易 导致内存还有不少空间时就提前触发垃圾收集以获取足够的连续空间来“安置”它们。</p><h3 id="长期存活的对象将进入老年代"><a href="#长期存活的对象将进入老年代" class="headerlink" title="长期存活的对象将进入老年代"></a>长期存活的对象将进入老年代</h3><p>&#8195;&#8195;既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这点，虚拟机给每个对象定义 了一个对象年龄（Age)计数器。如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1。对 象在Survivor区中每“熬过”一次MinorGC,年龄就增加1岁，当它的年龄增加到一定程 度（默认为15岁），就将会被晋升到老年代中。</p><h3 id="动态对象年龄判定"><a href="#动态对象年龄判定" class="headerlink" title="动态对象年龄判定"></a>动态对象年龄判定</h3><p>&#8195;&#8195;为了能更好地适应不同程序的内存状况，虚拟机并不是永远地要求对象的年龄必须达到了MaxTenuringThreshold才能晋升老年代，如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进人老年代，无须等到MaxTenuringThreshold中要求的年龄。</p><h3 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h3><p>&#8195;&#8195;在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生 代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成 立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么 会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果 大于，将尝试着进行一次Minor GC,尽管这次Minor GC是有风险的：如果小于或者 HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC。</p><p>下面解释一下“冒险”是冒了什么风险，前面提到过，新生代使用复制收集算法，但 为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在 Minor GC后仍然存活的情况（最极端的情况就是内存回收后新生代中所有对象都存活），就 需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。</p><p>老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来，在实际完成内存回收之前是无法明确知道的，所以只好取之前每一次回收晋升到老年代对象容童的平均大小值作为经验值，与老年代的剩余空间进行比较，决定是 否进Full GC来让老年代腾出更多空间。</p><p>取平均值进行比较其实仍然是一种动态概率的手段，也就是说，如果某次Minor GC存 活后的对象突增，远远高于平均值的话，依然会导致担保失败（Handle Promotion Failure)。 如果出现了 HandlePromotionFailure失败，那就只好在失败后重新发起一次FullGC。虽然 担保失败时绕的圈子是最大的，但大部分情况下都还是会将HandlePromotkmFailure开关打 开，避免Full GC过于频繁。</p><p><strong>关于JVM参数设置与分析详见<a href="https://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html" target="_blank" rel="noopener">这篇文章</a>。</strong></p><hr><p>详情请参见深入理解Java虚拟机第二版 &#8195;&#8195;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt; &amp;#8195;&amp;#8195; Java 内存运行时区域的可分为程序计数器、虚拟机栈、本地方法栈、Java堆和方法区等5个部分，其中程序计数
      
    
    </summary>
    
      <category term="JVM" scheme="https://9191rs.me/categories/JVM/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java内存区域</title>
    <link href="https://9191rs.me/posts/35314/"/>
    <id>https://9191rs.me/posts/35314/</id>
    <published>2018-08-05T05:51:30.000Z</published>
    <updated>2018-08-05T07:44:52.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域，这些区域都有各自的用途，以及创建和销毁的时间：有的区域随着虚拟机进程的启动而 存在.有些区域则依赖用户线程的启动和结朿而建立和销毁。Java虚拟机所管理的内存将会包括以下几个运行时数据区域，如下图所示。</p><p><img src="/posts/35314/1.jpg" alt=""></p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p> &#8195;&#8195;程序计数器（Program Counter Register)是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p><p>&#8195;&#8195;程序计数器属于“线程私有”的内存。这是因为Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的， 在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线 程中的指令。因此，为了在线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立 的程序计数器，各条线程之间的计数器互不影响，独立存储。</p><h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><p>&#8195;&#8195;Java虚拟机栈（Java Virtual Machine Stacks)也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frames，方法运行时的基础数据结构) 用于存储局部变量表、操作数栈、动态链接、方法出 口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中人桟到 出栈的过程。</p><p>&#8195;&#8195;局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、 float、long、double)、对象引用（reference类型，它不等同于对象本身，可能是一个指向对 象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和 retumAddress类型（指向了一条字节码指令的地址)。其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot),其余的数 据类型只占用1个。局部变量表所需的内存空间在编译期间完成分配，当进人一个方法时， 这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部 变童表的大小。</p><p>&#8195;&#8195;在Java虚拟机规范中，对这个区域规定了<strong>两种异常</strong>状况：</p><ul><li>StackOverflowError异常 : 线程请求的栈深度大于虚 拟机所允许的深度。</li><li>OutOfMemoryError异常 : 虚拟机栈可以动态扩展且在扩展时无法申请到足够的内存。</li></ul><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>&#8195;&#8195;本地方法栈（Native Method Stack)与虚拟机栈所发挥的作用是非常相似的，它们之间的区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则为 虚拟机使用到的Native方法服务。在虚拟机规范中对本地方法找中方法使用的语言、使用方 式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（例如HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法 栈区域也会抛出 StackOverflowError 和 OutOfMemoryError 异常。</p><h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>&#8195;&#8195;Java堆(Java Heap)是Java虚拟机所管理的内存中最犬块,且 Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就 是存放实例，几乎所有的对象实例都在这里分配。这里<strong>要注意</strong>不过堆中的数据无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例。</p><p>&#8195;&#8195;Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError 异常。</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>&#8195;&#8195;方法区（Methof Area)也是各个线程共享的内存区域，它甩管存储已被虚拟机加载的类信息、常量、静态变量即时编译器编译后的代码等数据。当方法区无法满足内存分配需求时，将抛出 OutOfMemory Error 异常。</p><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>&#8195;&#8195;运行时常量池（Runtime Constant Pool)是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table)，用于 存放编译期生成的各种字面量和符号引用，这部分内容将在<strong>类加载后</strong>进人方法区的运行时常量池中存放。运行时常量池具备动态性，Java语言并 不要求常量一定只有编译期才能产生，也就是并非预置人Class文件中常量池的内容才能进 人方法区运行时常量池，运行期间也可能将新的常量放人池中。</p><p>&#8195;&#8195;当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>&#8195;&#8195;直接内存（DirectMemoiy)并不是虚拟机运行时数据区的一部分，也不是Java 虚拟机规范中定义的内存区域。早在JDK 1.4中新加人了 NIO (New Input/Output)类，引人了一种基于通道（Channel) 与缓冲区（Buffer)的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一 个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场 景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p><p>&#8195;&#8195;本直接内存的分配不会受到Java堆大小的限制，但是，既然是内存，肯定还是 会受到本机总内存大小以及处理器寻址空间的限 制。因此在动态扩展时也会出现OutOfMemoryError异常。</p><h2 id="HotSpot虚拟机在Java堆中堆对象的操作"><a href="#HotSpot虚拟机在Java堆中堆对象的操作" class="headerlink" title="HotSpot虚拟机在Java堆中堆对象的操作"></a>HotSpot虚拟机在Java堆中堆对象的操作</h2><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><p>&#8195;&#8195;在Java程序运行过程中无时无刻都有对象被创建出来。在语言层面上，创建对象通常仅仅是一个new关键字而已，而在虚拟机中，对象（文中讨论的对象限于普通Java对象，不包括数组和Class对象等）的创建过程却没有那么容易。</p><ol><li>虚拟机遇到一条new指令时，首先将去检査这个指令的参数是否能在常量池中定位到一 个类的符号引用，并且检査这个符号引用代表的类是否已被加载、解析和初始化过。如果没 有，那必须先执行相应的类加载过程。</li><li>在类加栽检査通过后，接下来虚拟机将为新生对象分配内存。对象所需内存的大小在 类加载完成后便可完全确定，为对象分配空间的任务等同于 把一块确定大小的内存从Java堆中划分出来。划分的方式又有两种：假设Java堆中内存是绝对规整的，所有用过 的内存都放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间那边挪动一段与对象大小相等的距离，这种分配方 式称为“指针碰撞”（Bump the Pointer)。如果Java堆中的内存并不是规整的，已使用的内存和空闲的内存相互交错，则虚拟机就必须维护一个列 表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象 实例，并更新列表上的记录，这种分配方式称为“空闲列表”（Free List〉。与此同时，由于Java堆被所有线程共享，还应该考虑在并发情况下为对象分配内存的线程安全 性：一种是对分配内存空间的动作进行同步处理——实际上虚拟机采用CAS配上失败重试的方式保证更新操作的原子性；另一种是把内存 分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配二小块内 存，称为本地线程分配缓冲。</li><li>内存分配完成后.虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头）。</li><li>虚拟机对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找 到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。这些信息存放在对象的对 象头（Object Header）之中。</li><li>经过以上步骤，new操作就已经完成，但是只有对象进行了初始化，一个真正可用的对象才算完全产生出来。</li></ol><h3 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h3><p>&#8195;&#8195;在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（Header)、 实例数据（Instance Data)和对齐填充（Padding)。</p><p>&#8195;&#8195;HotSpot虚拟机的对象头包括两部分信息，第一部分用于存储对象自身的运行时数据， 如哈希码（HashCode)、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等。另外一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指 针来确定这个对象是哪个类的实例。</p><p>&#8195;&#8195;接下来的实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种 类型的字段内容。无论是从父类继承下来的，还是在于类中定义的，都需要记录起来。</p><p>&#8195;&#8195;第三部分对齐填充并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用（HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍）。</p><h3 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h3><p>&#8195;&#8195;Java程序需要通过栈上的reference数据来操作堆上 的具体对象。由于reference类型在Java虚拟机规范中只规定了一个指向对象的引用，并没有定义这个引用应该通过何种方式去定位、访问堆中的对象的具体位置，所以对象访问方式 也是取决于虚拟机实现而定的。目前主流的访问方式有使用句柄和直接指针两种。</p><ul><li>如果使用句柄访问的话，那么Java堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息，如下图所示。<br><img src="/posts/35314/2.jpg" alt=""></li><li>如果使用直接指针访问，那么Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference中存储的直接就是对象地址，如下图所示。<br><img src="/posts/35314/3.jpg" alt=""></li></ul><hr><p>详情请参见深入理解Java虚拟机第二版</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域，这些区域都有各自的用途，以及创建和销毁的时间：有的区域
      
    
    </summary>
    
      <category term="JVM" scheme="https://9191rs.me/categories/JVM/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下编译OpenJDK7</title>
    <link href="https://9191rs.me/posts/14724/"/>
    <id>https://9191rs.me/posts/14724/</id>
    <published>2018-08-03T08:21:04.000Z</published>
    <updated>2018-08-03T09:49:29.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备开发包"><a href="#准备开发包" class="headerlink" title="准备开发包"></a>准备开发包</h2><ul><li>OpenJDK7u75官方源码包，<a href="https://jdk7.java.net/source.html" target="_blank" rel="noopener">下载地址</a></li><li>Bootstrap JDK为Oraclejdk7u80， <a href="http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html#jdk-7u80-oth-JPR" target="_blank" rel="noopener">下载地址</a></li><li>NetBeans7.0.1的C++版，<a href="https://netbeans.org/downloads/7.0.1/" target="_blank" rel="noopener">下载地址</a></li></ul><h2 id="编译OpenJDK7源码"><a href="#编译OpenJDK7源码" class="headerlink" title="编译OpenJDK7源码"></a>编译OpenJDK7源码</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><blockquote><p> sudo apt-get install build-essential gawk m4 libasound2-dev<br>libcups2-dev libxrender-dev xorg-dev xutils-dev x11proto-print-dev<br>binutils libmotif3 libmotif-dev ant</p></blockquote><h3 id="编写编译脚本"><a href="#编写编译脚本" class="headerlink" title="编写编译脚本"></a>编写编译脚本</h3><p>创建一个build.sh，并把下面的内容放进去，再把build.sh放到OpenJDK源码的目录下。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash   </span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">LANG</span>=C  </span><br><span class="line"><span class="comment"># Oracle JDK7的目录</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">ALT_BOOTDIR</span>=/usr/lib/jvm/jdk1.7.0_80</span><br><span class="line">  </span><br><span class="line"><span class="comment">#允许自动下载依赖包  </span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">ALLOW_DOWNLOADS</span>=<span class="literal">true</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#使用预编译头文件，以提升便以速度 </span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">USE_PRECOMPILED_HEADER</span>=<span class="literal">true</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#要编译的内容  </span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">BUILD_LANGTOOLS</span>=<span class="literal">true</span>  </span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">BUILD_JAXP</span>=<span class="literal">true</span>  </span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">BUILD_JAXWS</span>=<span class="literal">true</span>  </span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">BUILD_CORBA</span>=<span class="literal">true</span>  </span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">BUILD_HOSTPOT</span>=<span class="literal">true</span>  </span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">BUILD_JDK</span>=<span class="literal">true</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#要编译的版本  </span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">SKIP_DEBUG_BUILD</span>=<span class="literal">false</span>  </span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">SKIP_FASTDEBUG_BUILD</span>=<span class="literal">true</span>  </span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">DEBUG_NAME</span>=debug  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#避免javaws和浏览器Java插件等的build  </span></span><br><span class="line"><span class="attribute">BUILD_DEPLOY</span>=<span class="literal">false</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#不build安装包</span></span><br><span class="line"><span class="attribute">BUILD_INSTALL</span>=<span class="literal">false</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#设置存放编译结果的目录,一定要放在一个可以读写的路径 </span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">ALT_OUTPUTDIR</span>=/home/re/openjdk7/build  </span><br><span class="line">  </span><br><span class="line">unset CLASSPATH  </span><br><span class="line">unset JAVA_HOME  </span><br><span class="line">make sanity   </span><br><span class="line">make 2&gt;&amp;1 | tee <span class="variable">$ALT_OUTPUTDIR</span>/build.log</span><br></pre></td></tr></table></figure></p><h3 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h3><p>在命令行里切换到OpenJDK源码的目录下，运行脚本。</p><blockquote><p>sh build.sh</p></blockquote><p>经过一段时间的运行之后，出现下图时，就是编译完成了。<br><img src="/posts/14724/res.jpg" alt=""></p><h3 id="编译过程中遇到的问题"><a href="#编译过程中遇到的问题" class="headerlink" title="编译过程中遇到的问题"></a>编译过程中遇到的问题</h3><ul><li>内核版本不支持</li></ul><blockquote><p>echo “<strong><em> This OS is not supported:” <code>uname -a</code>; exit 1;</em></strong> This OS is not supported: Linux bcc66964b45e 4.9.27-moby </p></blockquote><p>解决办法：编辑 hotspot/make/linux/Makefile，在改SUPPORTED_OS_VERSION一行后面添加4%。</p><blockquote><p> SUPPORTED_OS_VERSION = 2.4% 2.5% 2.6% 2.7% 3% 4%</p></blockquote><ul><li>时间问题<blockquote><p>Error: time is more than 10 years from present: 1136059200000<br>java.lang.RuntimeException: time is more than 10 years from present: 1136059200000</p></blockquote></li></ul><p>解决办法：修改/jdk/src/share/classes/java/util/CurrencyData.properties中的几行参数，将其改为0年内的一个时间。</p><blockquote><p>AZ=AZM;2010-12-31-20-00-00;AZN </p></blockquote><p>MZ=MZM;2011-06-30-22-00-00;MZN</p><blockquote></blockquote><p>RO=ROL;2011-06-30-21-00-00;RON</p><blockquote><p>TR=TRL;2011-12-31-22-00-00;TRY</p></blockquote><p>VE=VEB;2012-01-01-04-00-00;VEF</p><h2 id="在NetBeans-IDE工具中进行HotSpot调试实例"><a href="#在NetBeans-IDE工具中进行HotSpot调试实例" class="headerlink" title="在NetBeans IDE工具中进行HotSpot调试实例"></a>在NetBeans IDE工具中进行HotSpot调试实例</h2><ol><li>在NetBeans中新建基于源码c/c++项目</li></ol><p><img src="/posts/14724/1.jpg" alt=""></p><ol start="2"><li>选择OpenJDK下关于hotspot的源码文件夹地址，以及选择定制</li></ol><p><img src="/posts/14724/2.jpg" alt=""></p><ol start="3"><li>选择hotspot的make目录下makefile的路径</li></ol><p><img src="/posts/14724/3.jpg" alt=""></p><ol start="4"><li>下一步要填写一些生成命令：</li></ol><p><img src="/posts/14724/4.jpg" alt=""></p><blockquote><p>${MAKE} -f Makefile clean jvmg ALT_BOOTDIR=/usr/lib/jvm/jdk1.7.0_80 ARCH_DATA_MODEL=64 LANG=C </p></blockquote><p>其中ALT_BOOTDIR就是编译脚本Oracle JDK7的目录的路径。</p><ol start="5"><li>一直点下一步，在ide中会出现hotspot项目,右键点击项目，选择属性，再点运行，又出来三个需要配置的地方。</li></ol><p><img src="/posts/14724/5.jpg" alt=""></p><p>设置运行命令为：</p><blockquote><p>/home/re/openjdk7/build/hotspot/outputdir/linux_amd64_compiler2/jvmg/gamma  Queens  -XX:+TraceBytecodes -XX:StopInterpreterAt=<n></n></p></blockquote><p>设置运行目录为：</p><blockquote><p>/home/re/openjdk7/build/hotspot/outputdir/linux_amd64_compiler2/jvmg/gamma</p></blockquote><p>设置环境变量为：</p><blockquote><p>  JAVA_HOME  ：/usr/lib/jvm/jdk1.7.0_80</p><p>CLASSPATH：.: \$ {JAVA_HOME}/lib/dt.jar:\${JAVA_HOME}/lib/tools.jar</p></blockquote><p>LD_LIBRARY_PATH： /home/re/openjdk7/build/hotspot/outputdir/linux_amd64_compiler2/jvmg</p><ol start="6"><li>完成以上配置之后，一个可修改、编译、调试的HotSpot 工程就完全建立起来了，启动器的执行入口是java.c的main()方法，读者可以设置断点单步跟踪，如下图所示。<br><img src="/posts/14724/6.jpg" alt=""></li></ol><hr><p>参考链接：</p><ul><li><a href="https://juejin.im/entry/582016462e958a0054f45660" target="_blank" rel="noopener">https://juejin.im/entry/582016462e958a0054f45660</a></li><li>Java虚拟机HotSpot调试实例：<a href="https://www.linuxidc.com/Linux/2017-12/149077.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2017-12/149077.htm</a></li><li>深入理解Java虚拟机</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备开发包&quot;&gt;&lt;a href=&quot;#准备开发包&quot; class=&quot;headerlink&quot; title=&quot;准备开发包&quot;&gt;&lt;/a&gt;准备开发包&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;OpenJDK7u75官方源码包，&lt;a href=&quot;https://jdk7.java.net/sour
      
    
    </summary>
    
      <category term="JVM" scheme="https://9191rs.me/categories/JVM/"/>
    
    
      <category term="OpenJDK7" scheme="https://9191rs.me/tags/OpenJDK7/"/>
    
      <category term="java" scheme="https://9191rs.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>滑动窗口的最大值</title>
    <link href="https://9191rs.me/posts/8268/"/>
    <id>https://9191rs.me/posts/8268/</id>
    <published>2018-08-02T08:23:48.000Z</published>
    <updated>2018-08-03T10:03:16.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。均不匹配.</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>对于这个题目而言，暴力解法是比较遍历整个数组，求出每一个滑动窗口的最大值，但是这样做的话带来了大量的重复计算。<br>因此，如果考虑滑动窗口之间的相关性，可以用一个队列来模拟整个过程。</p><p>对新来的元素k，将其与队列中的元素相比较<br>1、前面比k小的，直接移出队列（因为不再可能成为后面滑动窗口的最大值了!）,<br>2、前面比k大的X，比较两者下标，判断X是否已不在窗口之内，不在了，直接移出队列<br>注意：队列中存放的是每个元素对应的索引</p><p>重复下来，队列的第一个元素是滑动窗口中的最大值</p><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ArrayList&lt;Integer&gt; maxInWindows(<span class="built_in">int</span> [] nums, <span class="built_in">int</span> <span class="built_in">size</span>)&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">int</span> len = nums.length;</span><br><span class="line">    <span class="keyword">if</span>(len==<span class="number">0</span>||<span class="built_in">size</span>==<span class="number">0</span>||<span class="built_in">size</span>&gt;len) <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">    LinkedList&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span><span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty()&amp;&amp;nums[i]&gt;nums[q.getLast()])</span><br><span class="line">            q.removeLast();</span><br><span class="line">        q.addLast(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="built_in">size</span><span class="number">-1</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty()&amp;&amp;nums[i]&gt;nums[q.getLast()])</span><br><span class="line">            q.removeLast();</span><br><span class="line">        q.addLast(i);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i-q.getFirst() + <span class="number">1</span>&gt;<span class="built_in">size</span>)</span><br><span class="line">            q.removeFirst();</span><br><span class="line">        </span><br><span class="line">        res.<span class="built_in">add</span>(nums[q.getFirst()]);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://9191rs.me/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="算法" scheme="https://9191rs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://9191rs.me/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式匹配</title>
    <link href="https://9191rs.me/posts/16074/"/>
    <id>https://9191rs.me/posts/16074/</id>
    <published>2018-08-02T02:51:07.000Z</published>
    <updated>2018-08-03T09:50:26.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请实现一个函数用来匹配包括’.’和’ <em> ‘的正则表达式。模式中的字符’ . ‘表示任意一个字符，而’ </em> ‘表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab<em>ac</em>a”匹配，但是与”aa.a”和”ab*a”均不匹配</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>要判断是否匹配，首先对’ . ‘  和 ‘ * ‘的作用进行分析：</p><p>‘ . ‘比较简单，就是可以指代任意字符，切不可忽略。</p><p>‘ <em> ‘一般出现在一个字符的后面，表示它前面的字符可以出现0次或者多次。<br>如果字符串第一个字符跟模式第一个字符不匹配，则模式后移2个字符，继续匹配。<br>如果字符串第一个字符跟模式第一个字符匹配，可以有3种匹配方式：<br>1、模式后移2字符，相当于x</em>被忽略<br>2、字符串后移1字符，模式后移2字符，即只匹配一次<br>3、字符串后移1字符，模式不变，即继续匹配字符下一位</p><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public boolean <span class="built_in">match</span>(<span class="built_in">char</span>[] s, <span class="built_in">char</span>[] p)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(s==null||p==null)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">match</span>(s,<span class="number">0</span>, p,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private boolean <span class="built_in">match</span>(<span class="built_in">char</span>[] s,int si,<span class="built_in">char</span>[] p,int <span class="built_in">pi</span>)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(si==s.length&amp;&amp;<span class="built_in">pi</span>==p.length)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(si!=s.length&amp;&amp;<span class="built_in">pi</span>==p.length)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">pi</span>&lt;p.length<span class="number">-1</span>&amp;&amp;p[<span class="built_in">pi</span>+<span class="number">1</span>]==<span class="string">'*'</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>((si != s.length &amp;&amp; p[<span class="built_in">pi</span>] == s[si]) || (p[<span class="built_in">pi</span>] == <span class="string">'.'</span> &amp;&amp; si != s.length))</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">match</span>(s,si+<span class="number">1</span>, p,<span class="built_in">pi</span>+<span class="number">2</span>)</span><br><span class="line">                || <span class="built_in">match</span>(s,si+<span class="number">1</span>, p,<span class="built_in">pi</span>)</span><br><span class="line">                || <span class="built_in">match</span>(s,si, p,<span class="built_in">pi</span>+<span class="number">2</span>);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">match</span>(s,si, p,<span class="built_in">pi</span>+<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((si != s.length &amp;&amp; p[<span class="built_in">pi</span>] == s[si]) || (p[<span class="built_in">pi</span>] == <span class="string">'.'</span> &amp;&amp; si != s.length))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">match</span>(s,si+<span class="number">1</span>, p,<span class="built_in">pi</span>+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;请实现一个函数用来匹配包括’.’和’ &lt;em&gt; ‘的正则表达式。模式中的字符’ . ‘表示任意一个字符，而’ &lt;/em&gt; ‘
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://9191rs.me/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="算法" scheme="https://9191rs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://9191rs.me/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>数字在排序数组中出现的次数</title>
    <link href="https://9191rs.me/posts/32844/"/>
    <id>https://9191rs.me/posts/32844/</id>
    <published>2018-08-02T02:14:25.000Z</published>
    <updated>2018-08-03T09:51:15.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>统计一个数字在排序数组中出现的次数。<br><strong> 注意：输入的数组是有序的。 </strong></p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>对于这个题目，最简单的思路就是顺序扫描整个数组，当找到这个数字时，让相应的计数变量自增。这样的话，算法的时间复杂度为O(n)。但是千万忘了该数组是有序的，因此可以考虑是否可以用上二分搜索。最简单的一种想法就是利用二分搜索找到它第一次出现的位置，再找到它最后一次出现的位置，两个相减既是该数字出现的次数。该算法时间复杂度为O(log n)。</p><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> GetNumberOfK(<span class="built_in">int</span> [] nums , <span class="built_in">int</span> k) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">len</span> = nums.length;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>==<span class="number">0</span>) return <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">int</span> start = getStartK(nums,k,<span class="number">0</span>,nums.length<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">end</span> = getEndK(nums,k,<span class="number">0</span>,nums.length<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(start!=<span class="number">-1</span>&amp;&amp;<span class="keyword">end</span>!=<span class="number">-1</span>)</span><br><span class="line">        return <span class="keyword">end</span> - start + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> getStartK(<span class="built_in">int</span>[] nums,<span class="built_in">int</span> k,<span class="built_in">int</span> l,<span class="built_in">int</span> r)&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) return <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">mid</span> = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(nums[<span class="built_in">mid</span>]==k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">mid</span>&gt;<span class="number">0</span>&amp;&amp;nums[<span class="built_in">mid</span><span class="number">-1</span>]!=k||<span class="built_in">mid</span>==<span class="number">0</span>)</span><br><span class="line">            return <span class="built_in">mid</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = <span class="built_in">mid</span><span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[<span class="built_in">mid</span>]&gt;k)&#123;</span><br><span class="line">        r = <span class="built_in">mid</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        l = <span class="built_in">mid</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return getStartK(nums,k,l,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> getEndK(<span class="built_in">int</span>[] nums,<span class="built_in">int</span> k,<span class="built_in">int</span> l,<span class="built_in">int</span> r)&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) return <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">mid</span> = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(nums[<span class="built_in">mid</span>]==k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">mid</span>&lt;nums.length<span class="number">-1</span>&amp;&amp;nums[<span class="built_in">mid</span>+<span class="number">1</span>]!=k||<span class="built_in">mid</span>==nums.length<span class="number">-1</span>)</span><br><span class="line">            return <span class="built_in">mid</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = <span class="built_in">mid</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[<span class="built_in">mid</span>]&gt;k)&#123;</span><br><span class="line">        r = <span class="built_in">mid</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        l = <span class="built_in">mid</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return getEndK(nums,k,l,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;统计一个数字在排序数组中出现的次数。&lt;br&gt;&lt;strong&gt; 注意：输入的数组是有序的。 &lt;/strong&gt;&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://9191rs.me/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="算法" scheme="https://9191rs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://9191rs.me/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>数组中的逆序对</title>
    <link href="https://9191rs.me/posts/33062/"/>
    <id>https://9191rs.me/posts/33062/</id>
    <published>2018-08-02T01:40:51.000Z</published>
    <updated>2018-08-03T09:50:50.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007<br>注意：输入的数组中没有的相同的数字</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>对于这个题目，最简单的思路就是顺序扫描整个数组，每扫描到一个数字的时候，逐个比较该数字和它后面的数字的大小，如果后面的数字比它小，则这两个数字就组成了一个逆序对，对于一个长度为n的数组来说，这个算法的时间复杂度为O(n^2)。</p><p>在这里以数组{7,5,6,4}为例来分析统计逆序对的过程。<br><img src="/posts/33062/101.jpg" alt=""> </p><p>(a) 把长度为4的数组分解成两个长度为2的子数组；<br>(b) 把长度为2的数组分解成两个成都为1的子数组；<br>(c) 把长度为1的子数组 合并、排序并统计逆序对 ；<br>(d) 把长度为2的子数组合并、排序，并统计逆序对；</p><p>在上图（a）和（b）中，先把数组分解成两个长度为2的子数组，再把这两个子数组分别拆成两个长度为1的子数组。接下来一边合并相邻的子数组，一边统计逆序对的数目。在第一对长度为1的子数组{7}、{5}中7大于5，因此（7,5）组成一个逆序对。同样在第二对长度为1的子数组{6}、{4}中也有逆序对（6,4）。由于已经统计了这两对子数组内部的逆序对，因此需要把这两对子数组 排序 如上图（c）所示， 以免在以后的统计过程中再重复统计。其实可以看到，这种做法就是归并排序的一部分操作。</p><p>在每一次归并的时候，如果后半部分指数组针指向的数字比前半部分数组指针指向的数字大，则和归并排序一样，反之，前半部分指向的数字大，则进行统计，此时，前半部分剩下的所有数字都和后半部分当前的数字构成了一个逆序对。算法的时间复杂度是O(n*log n),空间复杂度是O(n)。</p><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> long cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span>[] aux;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> InversePairs(<span class="built_in">int</span> [] nums) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">len</span> = nums.length;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>&lt;<span class="number">2</span>) return <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    aux = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="built_in">len</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> <span class="keyword">step</span> = <span class="number">1</span>;<span class="keyword">step</span>&lt;<span class="built_in">len</span>;<span class="keyword">step</span> += <span class="keyword">step</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> k=<span class="number">0</span>;k&lt;<span class="built_in">len</span>-<span class="keyword">step</span>;k += <span class="number">2</span>*<span class="keyword">step</span>)</span><br><span class="line">            merge(nums,k,k+<span class="keyword">step</span><span class="number">-1</span>,Math.min(<span class="built_in">len</span><span class="number">-1</span>,k+<span class="number">2</span>*<span class="keyword">step</span><span class="number">-1</span>));</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    return (<span class="built_in">int</span>)(cnt%<span class="number">1000000007</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> void merge(<span class="built_in">int</span>[] nums,<span class="built_in">int</span> l,<span class="built_in">int</span> m,<span class="built_in">int</span> r)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> k=l;k&lt;=r;k++)</span><br><span class="line">        aux[k] = nums[k];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> i = l,j = m+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> k=l;k&lt;=r;k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;m) nums[k] = aux[j++];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(j&gt;r) nums[k] = aux[i++];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(aux[j]&gt;aux[i]) nums[k] = aux[i++];</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            nums[k] = aux[j++];</span><br><span class="line">            cnt += m-i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://9191rs.me/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="算法" scheme="https://9191rs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://9191rs.me/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树转换为双向链表</title>
    <link href="https://9191rs.me/posts/18325/"/>
    <id>https://9191rs.me/posts/18325/</id>
    <published>2018-08-01T12:58:55.000Z</published>
    <updated>2018-08-03T09:52:15.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>&#8195;输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>&#8195;核心思想是利用树的中序遍历（递归版）<br>解题思路：<br>1.将左子树构造成双链表，并返回链表头节点。<br>2.定位至左子树双链表最后一个节点。<br>3.如果左子树链表不为空的话，将当前root追加到左子树链表。<br>4.将右子树构造成双链表，并返回链表头节点。<br>5.如果右子树链表不为空的话，将该链表追加到root节点之后。<br>6.根据左子树链表是否为空确定返回的节点。</p><h2 id="Java参考代码"><a href="#Java参考代码" class="headerlink" title="Java参考代码"></a>Java参考代码</h2><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TreeNode &#123;</span><br><span class="line">    <span class="built_in">int</span> val = <span class="number">0</span>;</span><br><span class="line">    TreeNode <span class="built_in">left</span> = <span class="literal">null</span>;</span><br><span class="line">    TreeNode <span class="built_in">right</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode(<span class="built_in">int</span> val) &#123;</span><br><span class="line">        this.val = val;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> TreeNode Convert(TreeNode root) &#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="literal">null</span>)</span><br><span class="line">return <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(root.<span class="built_in">left</span>==<span class="literal">null</span>&amp;&amp;root.<span class="built_in">right</span>==<span class="literal">null</span>)</span><br><span class="line">return root;</span><br><span class="line"></span><br><span class="line">TreeNode <span class="built_in">left</span> = Convert(root.<span class="built_in">left</span>);</span><br><span class="line">TreeNode p = <span class="built_in">left</span>;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">null</span>&amp;&amp;p.<span class="built_in">right</span>!=<span class="literal">null</span>)</span><br><span class="line">p = p.<span class="built_in">right</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">left</span>!=<span class="literal">null</span>)&#123;</span><br><span class="line">p.<span class="built_in">right</span> = root;</span><br><span class="line">root.<span class="built_in">left</span> = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TreeNode <span class="built_in">right</span> = Convert(root.<span class="built_in">right</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">right</span>!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="built_in">right</span>.<span class="built_in">left</span> = root;</span><br><span class="line">root.<span class="built_in">right</span> = <span class="built_in">right</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return <span class="built_in">left</span> == <span class="literal">null</span> ? root : <span class="built_in">left</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://www.nowcoder.com/questionTerminal/947f6eb80d944a84850b0538bf0ec3a5" target="_blank" rel="noopener">https://www.nowcoder.com/questionTerminal/947f6eb80d944a84850b0538bf0ec3a5</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&amp;#8195;输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://9191rs.me/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="算法" scheme="https://9191rs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://9191rs.me/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>旋转数组的最小数字</title>
    <link href="https://9191rs.me/posts/48940/"/>
    <id>https://9191rs.me/posts/48940/</id>
    <published>2018-08-01T06:29:09.000Z</published>
    <updated>2018-08-03T09:50:37.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，<br>输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。<br>NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>采用二分法解答这个问题，<br>mid = l + (r - l)/2<br>需要考虑三种情况：<br>(1)nums[mid] &gt; nums[r]:<br>&#8195;出现这种情况的nums类似[3,4,5,6,0,1,2]，此时最小数字一定在mid的右边。</p><p>(2)nums[mid] == nums[r]:<br>&#8195;出现这种情况的nums类似 [1,0,1,1,1] 或者[1,1,1,0,1]，此时最小数字不好判断在mid左边<br>还是右边,这时只好一个一个试 。<br>(3)nums[mid] &lt; nums[r]:<br>&#8195;出现这种情况的nums类似[2,2,3,4,5,6,6],此时最小数字一定就是nums[mid]或者在mid的左边。<br>因为右边必然都是递增的。</p><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> minNumberInRotatenums(<span class="built_in">int</span> [] nums) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> <span class="built_in">len</span> = nums.length;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span>==<span class="number">0</span>) return <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> l = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> r = <span class="built_in">len</span><span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">mid</span> = l + (r-l)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(nums[<span class="built_in">mid</span>]&gt;nums[r])</span><br><span class="line">l = <span class="built_in">mid</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(nums[<span class="built_in">mid</span>]==nums[r])</span><br><span class="line">r--;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">r = <span class="built_in">mid</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return nums[l];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目要求&quot;&gt;&lt;a href=&quot;#题目要求&quot; class=&quot;headerlink&quot; title=&quot;题目要求&quot;&gt;&lt;/a&gt;题目要求&lt;/h2&gt;&lt;p&gt;把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，&lt;br&gt;输出旋转数组的
      
    
    </summary>
    
      <category term="算法" scheme="https://9191rs.me/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="剑指offer" scheme="https://9191rs.me/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序的三种实现</title>
    <link href="https://9191rs.me/posts/20940/"/>
    <id>https://9191rs.me/posts/20940/</id>
    <published>2018-07-29T01:52:07.000Z</published>
    <updated>2018-08-03T09:51:45.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序介绍"><a href="#冒泡排序介绍" class="headerlink" title="冒泡排序介绍"></a>冒泡排序介绍</h2><p>冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，<br>一次比较两个元素，如果他们的顺序错误就把他们交换过来。<br>走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。<br>这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端。</p><p>实现过程：<br><br>设数组的长度为N：<br>（1）比较前后相邻的二个数据，如果前面数据大于后面的数据，就将这二个数据交换。<br>（2）这样对数组的第0个数据到N-1个数据进行一次遍历后，最大的一个数据就“沉”到数组第N-1个位置。<br>（3）N=N-1，如果N不为0就重复前面二步，否则排序完成。</p><h2 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h2><p>根据上述介绍，很快就能写出基本实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最基本的冒泡</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sort1</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n-i;j++)</span><br><span class="line"><span class="keyword">if</span>(nums[j<span class="number">-1</span>]&gt;nums[j])</span><br><span class="line">swap(nums,j<span class="number">-1</span>,j);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="改进1"><a href="#改进1" class="headerlink" title="改进1"></a>改进1</h2><p>考虑整个排序过程可以发现，如果一趟数据交换过程中没有出现一次数据交换，则可以认为数组已经有序了。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一点点改进 只要在一次冒泡中没有发生交换，则认为数组已经有序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">Sort2</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">int</span> k = n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(flag)&#123;</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;k;j++)</span><br><span class="line"><span class="keyword">if</span>(nums[j<span class="number">-1</span>]&gt;nums[j])&#123;</span><br><span class="line">swap(nums,j<span class="number">-1</span>,j);</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">k--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="改进2"><a href="#改进2" class="headerlink" title="改进2"></a>改进2</h2><p>同样考虑，如果在交换过程中，前面的数据发生了交换，而后面一部分数据没有发生交换（已经有序），那么在下一趟交换过程中，只要对前面的数据进行交换即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接着改进  当后面的元素已经有序了，也不需要再次排序了</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sort3</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k = n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(k&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> t = k;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;t;j++)</span><br><span class="line"><span class="keyword">if</span>(nums[j<span class="number">-1</span>]&gt;nums[j])&#123;</span><br><span class="line">swap(nums,j<span class="number">-1</span>,j);</span><br><span class="line">k = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/u010853261/article/details/54891710" target="_blank" rel="noopener">https://blog.csdn.net/u010853261/article/details/54891710</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;冒泡排序介绍&quot;&gt;&lt;a href=&quot;#冒泡排序介绍&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序介绍&quot;&gt;&lt;/a&gt;冒泡排序介绍&lt;/h2&gt;&lt;p&gt;冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，&lt;br&gt;一次比较两个元素
      
    
    </summary>
    
      <category term="排序" scheme="https://9191rs.me/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="冒泡排序" scheme="https://9191rs.me/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>字符串的排列</title>
    <link href="https://9191rs.me/posts/3080/"/>
    <id>https://9191rs.me/posts/3080/</id>
    <published>2018-07-20T13:17:49.000Z</published>
    <updated>2018-08-01T15:02:40.760Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="题目要求："><a href="#题目要求：" class="headerlink" title="题目要求："></a>题目要求：</h2><p>输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串(字典序)abc,acb,bac,bca,cab和cba。输入一个字符串,长度不超9(可能有字符重复),字符只包括大小写字母。</p><h2 id="解决思路1-递归算法"><a href="#解决思路1-递归算法" class="headerlink" title="解决思路1-递归算法"></a>解决思路1-递归算法</h2><p>采用递归的方法，根据不同位置上字母的组合，先把结果保存在TreeSet中，这样既可以去掉重复的字符串，又可以保证字符串之间的字典顺序。</p><h2 id="java代码1"><a href="#java代码1" class="headerlink" title="java代码1"></a>java代码1</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">TreeSet&lt;<span class="keyword">String</span>&gt; t = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">    <span class="built_in">boolean</span>[]  used = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;<span class="keyword">String</span>&gt; Permutation(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">         </span><br><span class="line">        ArrayList&lt;<span class="keyword">String</span>&gt; res = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line">        <span class="built_in">int</span> len = <span class="built_in">str</span>.length();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        used = <span class="keyword">new</span> <span class="built_in">boolean</span>[len];</span><br><span class="line">         </span><br><span class="line">        PermutationAux(<span class="built_in">str</span>,len,<span class="number">0</span>,<span class="keyword">new</span> StringBuilder());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">String</span> tt : t)</span><br><span class="line">            res.<span class="built_in">add</span>(tt);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> PermutationAux(<span class="keyword">String</span> s,<span class="built_in">int</span> n,<span class="built_in">int</span> cnt,StringBuilder sb)&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span>(sb.length() == n)&#123;</span><br><span class="line">            t.<span class="built_in">add</span>(sb.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!used[i])&#123;</span><br><span class="line">                used[i] = <span class="keyword">true</span>;</span><br><span class="line">                sb.<span class="built_in">append</span>(s.charAt(i));</span><br><span class="line">                PermutationAux(s,n,cnt+<span class="number">1</span>,sb);</span><br><span class="line">                sb.setLength(sb.length()<span class="number">-1</span>);</span><br><span class="line">                used[i] = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="解决思路2-字典序排列算法"><a href="#解决思路2-字典序排列算法" class="headerlink" title="解决思路2-字典序排列算法"></a>解决思路2-字典序排列算法</h2><p>一个全排列可看做一个字符串，字符串可有前缀、后缀。<br>生成给定全排列的下一个排列.所谓一个的下一个就是这一个与下一个之间没有其他的。<br>这就要求这一个与下一个有尽可能长的共同前缀，也即变化限制在尽可能短的后缀上。</p><p>【例】 如何得到346987521的下一个<br>1，从尾部往前找第一个P(i-1) &lt; P(i)的位置<br>3 4 6 &lt;- 9 &lt;- 8 &lt;- 7 &lt;- 5 &lt;- 2 &lt;- 1<br>最终找到6是第一个变小的数字，记录下6的位置i-1</p><p>2，从i位置往后找到最后一个大于6的数<br>    3 4 6 -&gt; 9 -&gt; 8 -&gt; 7 5 2 1<br>最终找到7的位置，记录位置为m</p><p>3，交换位置i-1和m的值<br>    3 4 7 9 8 6 5 2 1<br>4，倒序i位置后的所有数据<br>    3 4 7 1 2 5 6 8 9<br>则347125689为346987521的下一个排列</p><p>详情可以参考<a href="https://www.nowcoder.com/questionTerminal/fe6b651b66ae47d7acce78ffdd9a96c7" target="_blank" rel="noopener">牛客网</a>上@天天502关于这个揭发这个回答。</p><h2 id="java代码2"><a href="#java代码2" class="headerlink" title="java代码2"></a>java代码2</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ArrayList&lt;<span class="keyword">String</span>&gt; Permutation(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        ArrayList&lt;<span class="keyword">String</span>&gt; res = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line">        <span class="built_in">int</span> len = <span class="built_in">str</span>.length();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">char</span>[] ch =  <span class="built_in">str</span>.toCharArray();</span><br><span class="line">        Arrays.<span class="built_in">sort</span>(ch);</span><br><span class="line">        res.<span class="built_in">add</span>(<span class="keyword">String</span>.valueOf(ch));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="built_in">int</span> l = len<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&gt;<span class="number">0</span>&amp;&amp;ch[l<span class="number">-1</span>]&gt;=ch[l]) l--;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(l==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">int</span> r = l;</span><br><span class="line">            <span class="keyword">while</span>(r&lt;len&amp;&amp;ch[r]&gt;ch[l<span class="number">-1</span>]) r++;</span><br><span class="line">            </span><br><span class="line">            swap(ch,l<span class="number">-1</span>,r<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">reverse</span>(ch,l);</span><br><span class="line">            </span><br><span class="line">            res.<span class="built_in">add</span>(<span class="keyword">String</span>.valueOf(ch));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="built_in">reverse</span>(<span class="built_in">char</span>[] chars,<span class="built_in">int</span> k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chars==<span class="keyword">null</span> || chars.length&lt;=k)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">int</span> len = chars.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;(len-k)/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">int</span> m = k+i;</span><br><span class="line">            <span class="built_in">int</span> n = len<span class="number">-1</span>-i;</span><br><span class="line">            <span class="keyword">if</span>(m&lt;=n)&#123;</span><br><span class="line">                swap(chars,m,n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> swap(<span class="built_in">char</span>[] cs,<span class="built_in">int</span> i,<span class="built_in">int</span> j)&#123;</span><br><span class="line">        <span class="built_in">char</span> temp = cs[i];</span><br><span class="line">        cs[i] = cs[j];</span><br><span class="line">        cs[j] = temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;题目要求：&quot;&gt;&lt;a href=&quot;#题目要求：&quot; class=&quot;headerlink&quot; title=&quot;题目要求：&quot;&gt;&lt;/a&gt;题目要求：&lt;/h2&gt;&lt;p&gt;输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://9191rs.me/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="算法" scheme="https://9191rs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://9191rs.me/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>seckill</title>
    <link href="https://9191rs.me/posts/12142/"/>
    <id>https://9191rs.me/posts/12142/</id>
    <published>2018-06-21T15:01:45.000Z</published>
    <updated>2018-08-01T11:12:25.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="仿照慕课网完成的一个基于SSM的秒杀项目"><a href="#仿照慕课网完成的一个基于SSM的秒杀项目" class="headerlink" title="仿照慕课网完成的一个基于SSM的秒杀项目"></a>仿照慕课网完成的一个基于SSM的秒杀项目</h2><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>刚开始学习SSM框架的使用，也看了一些相关的书籍，但也不是很明白。<a href="https://www.imooc.com/course/programdetail/pid/59" target="_blank" rel="noopener">慕课网</a> 上的这套视频讲的很基础，非常适合入门学习，再看完这套视频之后，想把这个过程记录一下，加深自己的理解。<strong>在这里也感谢慕课网<a href="https://www.imooc.com/u/2145618/courses?sort=publish" target="_blank" rel="noopener">@yijun zhang</a>的分享的这门课程</strong>。 </p><p>本次课程的开发环境是IDEA+Maven+SSM框架，一共分为四个模块：</p><ul><li><a href="#1">Java高并发秒杀APi之业务分析与DAO层</a></li><li><a href="#2">Java高并发秒杀APi之Service</a></li><li><a href="#3">Java高并发秒杀APi之Web层</a></li><li><a href="#4">Java高并发秒杀APi之高并发优化</a></li></ul><p>下面分别对这四个方面进行讨论。</p><h2 id="Java高并发秒杀APi之业务分析与DAO层"><a href="#Java高并发秒杀APi之业务分析与DAO层" class="headerlink" title="Java高并发秒杀APi之业务分析与DAO层"></a><a id="1">Java高并发秒杀APi之业务分析与DAO层</a></h2><h3 id="1-项目初始化"><a href="#1-项目初始化" class="headerlink" title="1.项目初始化"></a>1.项目初始化</h3><p>采用Idea提供maven项目工程模板创建工程结构：</p><p><img src="/posts/12142/P.JPG" alt=""><br>在porm.xml里修改项目需要的坐标配置信息,<a href="https://github.com/LLLRS/seckil/blob/master/pom.xml" target="_blank" rel="noopener">参考</a>。</p><h3 id="2-Dao层设计开发"><a href="#2-Dao层设计开发" class="headerlink" title="2.Dao层设计开发"></a>2.Dao层设计开发</h3><p><strong>Dao是数据访问的缩写，它只进行数据的访问操作,不涉及逻辑业务</strong><br><br>首先创建数据库，相关表的sql语句查看<a href="https://github.com/LLLRS/seckil/blob/master/src/main/sql/schema.sql" target="_blank" rel="noopener">参考</a>。<br>然后创建表对应的实体类，在org.seckill.entity包下创建Seckill.java和SuccessKilled.java。<br>然后针对实体创建出对应dao层的接口，在org.seckill.dao包下创建SeckillDao.java和SuccessKilledDao.java,<a href="https://github.com/LLLRS/seckil/tree/master/src/main/java/org/seckill/dao" target="_blank" rel="noopener">参考</a>。<br>这里需要说明的是我们所创建的Dao接口并不需要要我们手动去实现，而是采用MyBatis去实现。<strong>Mybatis提供了Mapper动态代理开发的方式为自动实现Dao的接口。</strong><br>MyBatis提供了两种方式去实现Dao接口XML文件配置和注解，本次项目我们采用XML文件配置。首先在resources包下创建MyBatis全局配置文件mybatis-config.xml文件，打开<a href="http://mybatis.github.io/mybatis-3/zh/index.html" target="_blank" rel="noopener">MyBatis提供的文档</a>，点击左边的”入门”栏框，可以看到mybatis全局配置文件。在配置过程中，可以参考这个文档的一些内容去配置项目的mybatis-config.xml文件。接下来采用Mybatis提供的Mapper功能，实现Dao接口的开发，这里需要再次创建两个文件SeckillDao.xml和SuccessKilledDao.xml，<a href="https://github.com/LLLRS/seckil/tree/master/src/main/resources/mapper" target="_blank" rel="noopener">参考</a>。在这两个xml编写相应的SQL语句，这也是MyBatis的成功之处。</p><p>接下来要实现的是MyBatis和Spring的整合，整合目标:更少的编码:只写接口，不写实现类。更少的配置:别名、配置扫描映射xml文件、dao实现。足够的灵活性:自由定制SQL语句、自由传结果集自动赋值。<br>在resources包下创建一个spring包，里面放置spring对Dao、Service、transaction的配置文件。在浏览器中输入进入到Spring的官网可以看到其<a href="http://docs.spring.io/spring/docs/" target="_blank" rel="noopener">官方文档</a>,然后根据约定，编写<a href="https://github.com/LLLRS/seckil/blob/master/src/main/resources/spring/spring-dao.xml" target="_blank" rel="noopener">Spring-dao.xml</a>。</p><p>以上就基本完成了Dao层的开发，接下来就需要对写的代码进行单元测试，测试代码放在test包下，<a href="https://github.com/LLLRS/seckil/tree/master/src/test/java/org/seckill/dao" target="_blank" rel="noopener">参考</a>。</p><h2 id="Java高并发秒杀APi之Service"><a href="#Java高并发秒杀APi之Service" class="headerlink" title="Java高并发秒杀APi之Service"></a><a id="2">Java高并发秒杀APi之Service</a></h2><p>首先是Service接口的设计，这个接口里的应该是按照使用者的角度去编写，应该考虑到每个方法所返回的业务相关的对象，<br>这个对象用于封装Ser和Web层之间的数据传递<a href="https://github.com/LLLRS/seckil/tree/master/src/main/java/org/seckill/dto" target="_blank" rel="noopener">Dto层</a>,<br>dto和entity的区别在于:entity用于业务数据的封装，而dto用于完成web和service层的数据传递。另外还要整个秒杀过程中可能出现的异常，定义对应的<a href="https://github.com/LLLRS/seckil/tree/master/src/main/java/org/seckill/exception" target="_blank" rel="noopener">异常处理类</a>,<br>这些异常一般都应该是RuntimeException。设计好接口之后，就应该对其进行实现。</p><p>接下来就需要利用Spring对Service进行处理，在spring包下创建一个<a href="https://github.com/LLLRS/seckil/blob/master/src/main/resources/spring/spring-service.xml" target="_blank" rel="noopener">spring-service.xml</a>文件，采用注解(@Component @Service @Dao @Controller)的方式ji将刚才实现的Service实现类进行注入到Spring Ioc容器中。每个Service实现类采用( @Transactional)进行事务管理。</p><p>最好跟Dao层一样，利用Juit对Service层进行<a href="https://github.com/LLLRS/seckil/blob/master/src/test/java/org/seckill/service/SeckillServiceTest.java" target="_blank" rel="noopener">测试</a>。</p><h2 id="Java高并发秒杀APi之Web层"><a href="#Java高并发秒杀APi之Web层" class="headerlink" title="Java高并发秒杀APi之Web层"></a><a id="3">Java高并发秒杀APi之Web层</a></h2><p>Web层包含前端交互设计、Restful:url满足Restful设计规范、Spring MVC、bootstrap+jquery这四个方面的开发。</p><p>它的前端交互流程设计如下图:<br><br><br><img src="/posts/12142/do.png" alt=""> </p><p>Restful是一种优雅的URI表述方式，用来设计访问URL。通过这个URL的设计，就可以很自然的感知到这个URL代表的是哪种业务场景或者什么样的数据或资源。基于Restful设计的URL，对于接口的使用者、前端、web系统或者搜索引擎甚至是我们的用户，都是非常友好的。下面看看这个秒杀系统的URL设计:<br><br><br><img src="/posts/12142/restful.png" alt=""> </p><p><strong>整合配置Spring MVC框架</strong><br>首先在WEB-INF的<a href="https://github.com/LLLRS/seckil/blob/master/src/main/webapp/WEB-INF/web.xml" target="_blank" rel="noopener">web.xml</a>中进行我们前端控制器DispatcherServlet的配置,然后在spring容器中进行web层相关bean(即Controller)的配置，在spring包下创建一个<a href="https://github.com/LLLRS/seckil/blob/master/src/main/resources/spring/spring-web.xml" target="_blank" rel="noopener">spring-web.xml</a>，这样就完成了Spring MVC的相关配置(即将Spring MVC框架整合到了我们的项目中)，接下来就要基于Restful接口进行项目的Controller开发工作了。Controller中的每一个方法都对应我们系统中的一个资源URL，其设计应该遵循Restful接口的设计风格。<a href="https://github.com/LLLRS/seckil/blob/master/src/main/java/org/seckill/web/SeckillController.java" target="_blank" rel="noopener">Controller</a>开发中的方法完全是对照Service接口方法进行开发的，第一个方法用于访问我们商品的列表页，第二个方法访问商品的详情页，第三个方法用于返回一个json数据，数据中封装了我们商品的秒杀地址，第四个方法用于封装用户是否秒杀成功的信息，第五个方法用于返回系统当前时间。</p><p>接下来的工作主要就是页面开发，现在基本的趋势是前后端分离，所以了解一点即可。</p><p><strong>做完了这三个层，已经可以进行展示了</strong>：<br>运行Tomcat服务器,在浏览器中输入<a href="http://localhost:8080/seckill/list" target="_blank" rel="noopener">http://localhost:8080/seckill/list</a><br>列表页：</p><p><img src="/posts/12142/list.JPG" alt="">  </p><p>详情页：<br><img src="/posts/12142/m1.JPG" alt=""><br><img src="/posts/12142/m2.JPG" alt=""><br>再次秒杀会显示重复秒杀：<br><img src="/posts/12142/m3.JPG" alt=""></p><hr>]]></content>
    
    <summary type="html">
    
      仿照慕课网完成的一个基于SSM的秒杀项目
    
    </summary>
    
      <category term="ssm" scheme="https://9191rs.me/categories/ssm/"/>
    
    
      <category term="ssm" scheme="https://9191rs.me/tags/ssm/"/>
    
      <category term="github" scheme="https://9191rs.me/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 第51题  N-Queens</title>
    <link href="https://9191rs.me/posts/26372/"/>
    <id>https://9191rs.me/posts/26372/</id>
    <published>2018-04-08T14:19:14.000Z</published>
    <updated>2018-08-01T11:12:25.876Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>N皇后问题是一个非常经典的问题，即如何能够在N*N的棋盘上放置N个皇后，使得任何一个皇后都无法直接吃掉其他的皇后。为了达到此目的，任两个皇后都不能处于同一条横行、纵行或斜线上。注意仅当 N= 1 或N≥ 4 时问题有解。<br><img src="/posts/26372/1.bmp" alt="这里写图片描述"></p><p>这个问题依然可以用递归来解决。由于每一行只能放置一个皇后，所以可以尝试在从每一行的N个位置上尝试放置皇后，直到放满N个皇后。在尝试的过程中，维护三个数组表示该位置是否可以放置皇后，其中列用自身表示，主对角线上用横竖坐标的差表示，副对角线上用横竖坐标的和表示。</p><h2 id="JAVA代码实现"><a href="#JAVA代码实现" class="headerlink" title="JAVA代码实现"></a>JAVA代码实现</h2><pre><code>class Solution {     boolean[] col = null;     boolean[] dia1 = null;     boolean[] dia2 = null;      List&lt;List&lt;String&gt;&gt; res = new ArrayList&lt;&gt;();     public  List&lt;List&lt;String&gt;&gt; solveNQueens(int n) {         col = new boolean[n];         dia1 = new boolean[2*n-1];         dia2 = new boolean[2*n-1];         dfs(n, 0, new ArrayList&lt;&gt;());         return res;              }     public  void dfs(int n,int row,List&lt;Integer&gt; st) {         if(row==n){             res.add(aux(n, st));             return;         }         for(int i=0;i&lt;n;i++){             if(!col[i]&amp;&amp;!dia1[row-i+n-1]&amp;&amp;!dia2[row+i]){                 col[i] = true;                 dia1[row-i+n-1] = true;                 dia2[row+i] = true;                 st.add(i);                 dfs(n, row+1, st);                 st.remove(st.size()-1);                 col[i] = false;                 dia1[row-i+n-1] = false;                 dia2[row+i] = false;             }         }     }     public List&lt;String&gt; aux(int n,List&lt;Integer&gt; st) {         char[] t = new char[n];         List&lt;String&gt; temp = new ArrayList&lt;&gt;();         for(int i=0;i&lt;n;i++) t[i] = &apos;.&apos;;                         for(int i=0;i&lt;n;i++){             int k = st.get(i);             t[k] = &apos;Q&apos;;             temp.add(String.valueOf(t));             t[k] = &apos;.&apos;;          }         return temp;              }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;N皇后问题是一个非常经典的问题，即如何能够在N*N的棋盘上放置N个皇后，使得任何一个皇后都无法直接吃掉其他的皇后。为了达到此目的，任两个皇后都不能处于同一条横行、纵行或斜线上。注意仅当 N= 1 或N≥ 4 时问题有解。&lt;br&gt;&lt;img 
      
    
    </summary>
    
      <category term="leetcode" scheme="https://9191rs.me/categories/leetcode/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="算法" scheme="https://9191rs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://9191rs.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 第77题 Combinations</title>
    <link href="https://9191rs.me/posts/11001/"/>
    <id>https://9191rs.me/posts/11001/</id>
    <published>2018-04-08T13:53:43.000Z</published>
    <updated>2018-08-01T11:12:25.877Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><p>给定两个整数n和k，返回1 … n中所有可能的k个数的组合。</p><p>例如下图：<br><img src="/posts/11001/1.png" alt="这里写图片描述"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>对于1到n个整数进行k个组合，可以这样构造一个递归树，对与 整数i来说，只要能从i到n中找到k-1个元素即可，在这个递归过程中记录递归结果，等记录到k个结果时，就返回。</p><h2 id="JAVA代码"><a href="#JAVA代码" class="headerlink" title="JAVA代码"></a>JAVA代码</h2><pre><code>class Solution {    List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();    public List&lt;List&lt;Integer&gt;&gt; combine(int n, int k) {        if(n&lt;=0||k&lt;=0||k&gt;n) return res;        combineAux(n,k,1,new ArrayList&lt;Integer&gt;());        return res;    }    private void combineAux(int n,int k,int sta,List&lt;Integer&gt; t){        if(t.size()==k){            res.add(new ArrayList(t));            return;        }        for(int i = sta;i&lt;=n-(k-t.size())+1;i++){            t.add(i);            combineAux(n,k,i+1,t);            t.remove(t.size()-1);        }    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;题目要求&quot;&gt;&lt;a href=&quot;#题目要求&quot; class=&quot;headerlink&quot; title=&quot;题目要求&quot;&gt;&lt;/a&gt;题目要求&lt;/h3&gt;&lt;p&gt;给定两个整数n和k，返回1 … n中所有可能的k个数的组合。&lt;/p&gt;
&lt;p&gt;例如下图：&lt;
      
    
    </summary>
    
      <category term="leetcode" scheme="https://9191rs.me/categories/leetcode/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="算法" scheme="https://9191rs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://9191rs.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 第46题和第47题 全排列问题</title>
    <link href="https://9191rs.me/posts/49137/"/>
    <id>https://9191rs.me/posts/49137/</id>
    <published>2018-04-08T13:41:07.000Z</published>
    <updated>2018-08-01T11:12:25.875Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>leetcode 第46题和第47题 都是求一个给定数组中的全排列问题，不同之处在于47题中数组的元素可以重复。</p><h3 id="leetcode-第46题-解题思路"><a href="#leetcode-第46题-解题思路" class="headerlink" title="leetcode 第46题 解题思路"></a>leetcode 第46题 解题思路</h3><p>这也是一个递归问题。对于数组中的每个元素，它的全排列就等于它本身加上除它以外所有的全排。所以只要这样依次计算全排列就行。</p><h3 id="JAVA代码实现"><a href="#JAVA代码实现" class="headerlink" title="JAVA代码实现"></a>JAVA代码实现</h3><pre><code>class Solution {    List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();    boolean[] used = null;    public List&lt;List&lt;Integer&gt;&gt; permuteUnique(int[] nums) {        res.clear();        if(nums.length==0) return res;        used = new boolean[nums.length];        permuteAux(nums,0, new ArrayList&lt;&gt;());        return res;    }    private void permuteAux(int[] nums,int index,List&lt;Integer&gt; st) {        if(index == nums.length){            List&lt;Integer&gt; t = new ArrayList&lt;&gt;(st);            res.add(t);            return;        }        for(int i=0;i&lt;nums.length;i++){            if(used[i]) continue;            st.add(nums[i]);            used[i] = true;            permuteAux(nums,index+1,st);            used[i] = false;            st.remove(st.size()-1);        }        return;    }}</code></pre><h3 id="leetcode-第47题-解题思路"><a href="#leetcode-第47题-解题思路" class="headerlink" title="leetcode 第47题 解题思路"></a>leetcode 第47题 解题思路</h3><p>这也是一个递归问题。解题思路与46图题基本一致，但是却必须做出一些，改变，首先必须使得数组有序，在对数组中的每个元素进行全排列的时候，如果该元素与前一个元素相同，且前面一个元素已经完成了全排列，则跳过这个元素。</p><h3 id="JAVA代码实现-1"><a href="#JAVA代码实现-1" class="headerlink" title="JAVA代码实现"></a>JAVA代码实现</h3><pre><code>class Solution {    List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();    boolean[] used = null;    public List&lt;List&lt;Integer&gt;&gt; permuteUnique(int[] nums) {        res.clear();        if(nums.length==0) return res;        used = new boolean[nums.length];        Arrays.sort(nums);        permuteAux(nums,0, new ArrayList&lt;&gt;());        return res;    }    private void permuteAux(int[] nums,int index,List&lt;Integer&gt; st) {        if(index == nums.length){            List&lt;Integer&gt; t = new ArrayList&lt;&gt;(st);            res.add(t);            return;        }        for(int i=0;i&lt;nums.length;i++){            if(used[i]) continue;            if(i&gt;0 &amp;&amp;nums[i-1]==nums[i] &amp;&amp; !used[i-1]) continue;            st.add(nums[i]);            used[i] = true;            permuteAux(nums,index+1,st);            used[i] = false;            st.remove(st.size()-1);        }        return;    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;leetcode 第46题和第47题 都是求一个给定数组中的全排列问题，不同之处在于47题中数组的元素可以重复。&lt;/p&gt;
&lt;h3 id=&quot;leetcode-第46题-解题思路&quot;&gt;&lt;a href=&quot;#leetcode-第46题-解题思路&quot; 
      
    
    </summary>
    
      <category term="leetcode" scheme="https://9191rs.me/categories/leetcode/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="算法" scheme="https://9191rs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://9191rs.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 第17题 Letter Combinations of a Phone Number</title>
    <link href="https://9191rs.me/posts/24625/"/>
    <id>https://9191rs.me/posts/24625/</id>
    <published>2018-04-08T13:08:48.000Z</published>
    <updated>2018-08-01T11:12:25.872Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p>给定一个数字字符串，返回数字可能表示的所有可能的字母组合。 数字到字母的映射（就像在电话按钮上一样）在下面给出。<br><img src="/posts/24625/1.bmp" alt="这里写图片描述"></p><p>例如： 输入字符串 “23”，输出结果为： “ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这是一个典型的可以用递归解决的树形问题。对于每个数字，都分别代表了几个字母。组合在一起就变成了一个树。</p><h2 id="JAVA代码实现"><a href="#JAVA代码实现" class="headerlink" title="JAVA代码实现"></a>JAVA代码实现</h2><pre><code>class Solution {    String[] aux = {&quot; &quot;,&quot;&quot;,&quot;abc&quot;,&quot;def&quot;,&quot;ghi&quot;,&quot;jkl&quot;,&quot;mno&quot;,&quot;pqrs&quot;,&quot;tuv&quot;,&quot;wxyz&quot;};    List&lt;String&gt; res = new ArrayList&lt;&gt;();    public List&lt;String&gt; letterCombinations(String digits) {        res.clear();        if(digits.length()==0) return res;        letterCombinationsAux(digits,0,&quot;&quot;);        return res;    }    private void letterCombinationsAux(String d,int index,String s){        if(index==d.length()){            res.add(s);            return ;        }        String t = aux[d.charAt(index)-&apos;0&apos;];        for(int i = 0;i&lt;t.length();i++)            letterCombinationsAux(d,index+1,s+t.charAt(i));        return ;     }}</code></pre><p>原题地址：<a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/" target="_blank" rel="noopener">https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;题目要求&quot;&gt;&lt;a href=&quot;#题目要求&quot; class=&quot;headerlink&quot; title=&quot;题目要求&quot;&gt;&lt;/a&gt;题目要求&lt;/h2&gt;&lt;p&gt;给定一个数字字符串，返回数字可能表示的所有可能的字母组合。 数字到字母的映射（就像在电话
      
    
    </summary>
    
      <category term="leetcode" scheme="https://9191rs.me/categories/leetcode/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="算法" scheme="https://9191rs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://9191rs.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树（BST）的相关问题</title>
    <link href="https://9191rs.me/posts/8235/"/>
    <id>https://9191rs.me/posts/8235/</id>
    <published>2018-04-01T14:14:52.000Z</published>
    <updated>2018-08-01T11:12:25.880Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>前言：在二叉搜索树中，对于每个结点，它的所有左子树结点的元素小于当前节点数据，所有右子树结点大于当前结点。<br>二叉搜索树的三种常见操作：查找、删除、插入。</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>在查找操作中，就可以看到二叉搜索树的优势，它的时间复杂度为O(lg n).</p><pre><code>//查找 public TreeNode find(TreeNode root，int data){     if(root == null)  return null;     if(root.val&gt;data) return find(root.left,data);     if(root.val&lt;data) return find(root.right,data);     return root;         }//查找最小值 public TreeNode findMin(TreeNode root){     if(root == null)  return null;     if(root.left==null) return root;     return findMax(root.left);         }   //查找最大值public TreeNode findMax(TreeNode root) {    if(root==null) return null;    if(root.right==null)  return root;        return findMax(root.right);            }</code></pre><h3 id="插入："><a href="#插入：" class="headerlink" title="插入："></a>插入：</h3><p>思路：首先找到要插入数据的位置，与查找类似。当找到这个位置后，如果数据已经存在，则直接返回即可，否则，将数据插入到走过的最后一个位置上。</p><pre><code>public TreeNode insert(TreeNode root，int data){    if(root == null) {       root  = new TreeMode(data);       root.left = null;       root.right = null;   }     if(root.val&gt;data) root.left = insert(root.left,data);    if(root.val&lt;data) root.right = insert(root.right,data);    return root;        }</code></pre><h3 id="删除：-leetcode第450题-Delete-Node-in-a-BST"><a href="#删除：-leetcode第450题-Delete-Node-in-a-BST" class="headerlink" title="删除： leetcode第450题 Delete Node in a BST"></a>删除： leetcode第450题 Delete Node in a BST</h3><p>思路：首先找到这个结点，然后删除这个结点即可。删除的过程中听注意：如果该节点的为叶子结点，直接删除结点；如果只有一个孩子结点，就用这个结点替代即可；如果该节点有两个结点，可以有两种做法：1，用左子树中最大的结点替换该节点，并在左子树中删除该最大节点。2、用右子树中最小的结点替换该节点，并在右子树中删除该最小节点。</p><p>java代码实现</p><pre><code>class Solution {    //考虑四种情况    public TreeNode deleteNode(TreeNode root, int key) {        if(root ==null) return null;        if(root.val&gt;key){            root.left = deleteNode(root.left, key);        }else if(root.val&lt;key){            root.right = deleteNode(root.right,key);        }else{            if(root.left!=null&amp;&amp;root.right!=null){               TreeNode t = findMax(root.left);               root.val = t.val;               root.left = deleteNode(root.left,t.val);            }else{                               if(root.left==null)                    root = root.right;                else                    root = root.left;            }         }        return   root;      }    public TreeNode findMax(TreeNode root) {        if(root==null) return null;        if(root.right==null)  return root;        return findMax(root.right);                }}</code></pre><h3 id="判断：leetcode第98题-Validate-Binary-Search-Tree"><a href="#判断：leetcode第98题-Validate-Binary-Search-Tree" class="headerlink" title="判断：leetcode第98题 Validate Binary Search Tree"></a>判断：leetcode第98题 Validate Binary Search Tree</h3><p>思路：只要保证当前节点的左子树中的最大值小于当前节点，右子树中的最小值大于当前节点的值。遍历整个树中的结点即可。这里我们会犯得的一个错误是，仅判断当前结点的左孩子结点小于当前结点，右孩子结点大于当前结点是不够的。原因就在于左子树中可能存在比当前结点大的值。右子树存在比当前结点小的值。</p><p>JAVA代码实现</p><pre><code>class Solution {    public boolean isValidBST(TreeNode root) {        if(root ==null) return true;        if(root.left!=null&amp;&amp;findMax(root.left).val &gt;=root.val) return false;        if(root.right!=null&amp;&amp;findMin(root.right).val&lt;=root.val) return false;        return isValidBST(root.left)&amp;&amp;isValidBST(root.right);    }    public TreeNode findMax(TreeNode root){        if(root == null)  return null;         if(root.right==null) return root;        return findMax(root.right);            }    public TreeNode findMin(TreeNode root){        if(root == null)  return null;        if(root.left==null) return root;        return findMax(root.left);            }    }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;前言：在二叉搜索树中，对于每个结点，它的所有左子树结点的元素小于当前节点数据，所有右子树结点大于当前结点。&lt;br&gt;二叉搜索树的三种常见操作：查找、删除、插入。&lt;/p&gt;
&lt;h3 id=&quot;查找&quot;&gt;&lt;a href=&quot;#查找&quot; class=&quot;he
      
    
    </summary>
    
      <category term="二叉树" scheme="https://9191rs.me/categories/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="算法" scheme="https://9191rs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="BST" scheme="https://9191rs.me/tags/BST/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 第235题 和 第236 题：Lowest Common Ancestor</title>
    <link href="https://9191rs.me/posts/4885/"/>
    <id>https://9191rs.me/posts/4885/</id>
    <published>2018-04-01T13:11:09.000Z</published>
    <updated>2018-08-08T14:17:39.806Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>前言：第235题 和 第236 题都是求解一棵树中两个结点最近公共祖先（LCA）问题，但是不同之处在于235给出的树为一棵二叉搜索树（BST），而236是一颗一般的二叉树，这样的话在235中利用BST的性质可以很方便的解决问题，但是在236中就必须全面考虑。<br>一般而言，找一棵树的LCA可以分为三种情况：俩个结点分别在LCA的不同子树，两个结点中的一个就是LCA。</p><h3 id="第235题-Lowest-Common-Ancestor-of-a-Binary-Search-Tree"><a href="#第235题-Lowest-Common-Ancestor-of-a-Binary-Search-Tree" class="headerlink" title="第235题 Lowest Common Ancestor of a Binary Search Tree"></a>第235题 Lowest Common Ancestor of a Binary Search Tree</h3><p>思路：考虑到BST树的特殊结构：左子树中所有结点的值都比当前结点的值小，右子树中所有结点的值都比当前结点的值小。所以只要找到第一个结点的值的取值在给定的两个结点之间，这个结点就是要找的LCA。具体来说，就是尽量保证这两个结点在LCA的不同子树。</p><p>JAVA代码实现</p><pre><code>class Solution {    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {        if(root==null) return null;        if(p.val&lt;root.val&amp;&amp;q.val&lt;root.val)            return lowestCommonAncestor(root.left, p, q);        if(p.val&gt;root.val&amp;&amp;q.val&gt;root.val)            return lowestCommonAncestor(root.right, p, q);        return root;    }}</code></pre><h3 id="第236题"><a href="#第236题" class="headerlink" title="第236题"></a>第236题</h3><p>思路：对于一般的二叉树说，给定的两个结点出现的次数，出现的位置，都是不确定的甚至给定两个结点的值都可能是一样的。考虑到LCA出现的三种情况，当我们在递归的过程中，从根节点开始，只要遇到节点为空，结点为给定结点中的一个，就返回比较，如果在左子树和右子树中返回的结点都不为空，就返回当前结点，负责就返回不为空的那个。</p><p>JAVA代码实现</p><pre><code>class Solution {    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {        if(root == null||root == q||root == p)             return root;        TreeNode l = lowestCommonAncestor(root.left, p, q);        TreeNode r = lowestCommonAncestor(root.right, p, q);        if(l!=null&amp;&amp;r!=null)            return root;        return l!=null?l:r;            }}</code></pre><p>注意：这两个题都有一个隐含条件：就是要查找的两个结点已经在树中包含，负责在查找之前，我们还要判断这两个结点是否在树中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;前言：第235题 和 第236 题都是求解一棵树中两个结点最近公共祖先（LCA）问题，但是不同之处在于235给出的树为一棵二叉搜索树（BST），而236是一颗一般的二叉树，这样的话在235中利用BST的性质可以很方便的解决问题，但是在23
      
    
    </summary>
    
      <category term="leetcode" scheme="https://9191rs.me/categories/leetcode/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="算法" scheme="https://9191rs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://9191rs.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 第19题 Remove Nth Node From End of List</title>
    <link href="https://9191rs.me/posts/50137/"/>
    <id>https://9191rs.me/posts/50137/</id>
    <published>2018-03-25T14:02:12.000Z</published>
    <updated>2018-08-01T11:12:25.873Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><p>给定一个链表和一个整数n,移除链表的倒数第n个节点<br>假设给定的整数n在链表的范围内。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>如果先将链表遍历一遍，很容易移除数第n个元素。但是如果只能遍历一遍时，有一个很巧妙的办法是设置一个快指针，一个慢指针，当快节点到达链表末尾时，慢指针刚好到达倒数第n+1个节点。要实现这种思路，只要先将快指针移动n+1次，然后两个一起移动即可。</p><h3 id="JAVA代码实现"><a href="#JAVA代码实现" class="headerlink" title="JAVA代码实现"></a>JAVA代码实现</h3><pre><code>/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */class Solution {    public ListNode removeNthFromEnd(ListNode head, int n) {        ListNode dummy = new ListNode(0);        dummy.next = head;        ListNode pro = dummy;        ListNode cur = dummy;        for(int i=0;i&lt;n+1;i++)            cur = cur.next;        while(cur!=null){            cur = cur.next;            pro = pro.next;        }        pro.next = pro.next.next;        return dummy.next;    }}</code></pre><p>一点拓展：若个整数n的长度可以是任意的，就必须先计算除链表的长度，让后比较，进行相应的处理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;题目要求&quot;&gt;&lt;a href=&quot;#题目要求&quot; class=&quot;headerlink&quot; title=&quot;题目要求&quot;&gt;&lt;/a&gt;题目要求&lt;/h3&gt;&lt;p&gt;给定一个链表和一个整数n,移除链表的倒数第n个节点&lt;br&gt;假设给定的整数n在链表的范围内
      
    
    </summary>
    
      <category term="leetcode" scheme="https://9191rs.me/categories/leetcode/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="算法" scheme="https://9191rs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://9191rs.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>基于链表的归并排序</title>
    <link href="https://9191rs.me/posts/47140/"/>
    <id>https://9191rs.me/posts/47140/</id>
    <published>2018-03-25T13:37:25.000Z</published>
    <updated>2018-08-03T09:52:27.742Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>归并排序排序是一种常用的时间复杂度为O(n*lg n)的算法，它的基本想法是先对数据不断二分，然后对分开的每段数据进行合并，利用递归的思想，很容易完成排序。归并排序又分为自顶向下和自底向上两种实现方式，自顶向下实现起来比较简单，就是递归，对数据进行二分和合并。对与自底向上而言，，则需要考虑到每次归并元素的个数。<br>这里要注意的是，对与每次归并来说，必须保证链表的完整性，不能出现链表断裂的情况。</p><h2 id="JAVA代码实现"><a href="#JAVA代码实现" class="headerlink" title="JAVA代码实现"></a>JAVA代码实现</h2><p>1.自顶向下</p><pre><code>/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */class Solution {    public ListNode sortList(ListNode head) {        if(head==null||head.next==null)            return head;        ListNode pro =null;        ListNode slow = head;        ListNode fast = head;        while(fast!=null&amp;&amp;fast.next!=null){            pro = slow;            slow = slow.next;            fast = fast.next.next;        }        pro.next = null;        ListNode l1 = sortList(head);        ListNode l2 = sortList(slow);        return merge(l1,l2);    }    public ListNode merge(ListNode l1, ListNode l2) {        if(l1==null) return l2;        if(l2==null) return l1;        ListNode dummy = new ListNode(0);        ListNode cur = dummy;        while(l1!=null||l2!=null){            int c1 = Integer.MAX_VALUE;            int c2 = Integer.MAX_VALUE;            if(l1!=null) c1 = l1.val;            if(l2!=null) c2 = l2.val;            if(c1&lt;c2){                cur.next = l1;                cur = l1;                l1 = l1.next;            }else{                cur.next = l2;                cur = l2;                l2 = l2.next;            }        }        return dummy.next;    }}</code></pre><p>2.自底向上</p><pre><code>/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */class Solution {    public ListNode sortList(ListNode head) {      if(head==null||head.next==null)        return head;      ListNode cur = head;          int count = 0;      while(cur!=null){          cur = cur.next;          count++;      }      ListNode dummy = new ListNode(0);      dummy.next = head;      for(int step=1;step&lt;count;step +=step){          cur = dummy.next;          ListNode left = null;          ListNode right = null;          ListNode end = dummy;          while(cur!=null){              ListNode t = null;              left = cur;              for(int i=0;cur!=null&amp;i&lt;step;i++){                  t = cur;                  cur = cur.next;              }              t.next = null;              right = cur;              //把end作为下一段代码开始的头节点              for(int i=0;cur!=null&amp;i&lt;step;i++){                  t = cur;                  cur = cur.next;              }              t.next = null;              end = merge(left,right,end);          }      }      return dummy.next;  }    public  ListNode merge(ListNode l1, ListNode l2,ListNode dummy) {        if(l1==null){            dummy.next = l2;            return null;        }        if(l2==null) {            dummy.next = l1;            return null;        }        ListNode cur = dummy;        while(l1!=null||l2!=null){            int c1 = Integer.MAX_VALUE;            int c2 = Integer.MAX_VALUE;            if(l1!=null) c1 = l1.val;            if(l2!=null) c2 = l2.val;            if(c1&lt;c2){                cur.next = l1;                cur = l1;                l1 = l1.next;            }else{                cur.next = l2;                cur = l2;                l2 = l2.next;            }        }        return cur;    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;归并排序排序是一种常用的时间复杂度为O(n*lg n)的算法，它的基本想法是先对数据不断二分，然后对分开的每段数据进行合并，利用递归的思想，很容易完成排序。归并排序又分为自顶向下和自底向上两种实现方式，自顶向下实现起来比较简单，就是递归，
      
    
    </summary>
    
      <category term="链表" scheme="https://9191rs.me/categories/%E9%93%BE%E8%A1%A8/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="leetcode" scheme="https://9191rs.me/tags/leetcode/"/>
    
      <category term="数据结构" scheme="https://9191rs.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>基于链表的插入排序</title>
    <link href="https://9191rs.me/posts/34037/"/>
    <id>https://9191rs.me/posts/34037/</id>
    <published>2018-03-25T13:15:43.000Z</published>
    <updated>2018-08-01T11:12:25.883Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="插入排序的基本介绍"><a href="#插入排序的基本介绍" class="headerlink" title="插入排序的基本介绍"></a>插入排序的基本介绍</h3><p>插入排序的时间复杂度为O(n*n),但是在 给定数据近乎有序的情况下，它的时间复杂度可以接近O(n).它的基本思想是对于当前的节点。不断与该节点前面节点进行比较，直到它前面的数据小于它。如下图所示：<br><img src="https://img-blog.csdn.net/20180325210411456?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xsMTUzMTEyNTc2MTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>对元素2进行排序时，只要往前一直找，就可以将它插入合适的位置。<br>插入排序基于数组很容易实现，原因在于我们可以很方便的找到每一个位置上的数据。但是链表不能这么做，原因在于很难直接去到每一个元素。结合链表的特点，我们可以设置一个虚拟的头节点，对于每一个节点，都要从该虚拟节点开始，一直到大于这个节点的数为止。</p><h2 id="JAVA-代码实现"><a href="#JAVA-代码实现" class="headerlink" title="JAVA 代码实现"></a>JAVA 代码实现</h2><pre><code>/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */class Solution {    public ListNode insertionSortList(ListNode head) {        if(head==null) return head;        ListNode dummy = new ListNode(0);        ListNode pro = dummy;        ListNode cur = head;        while(cur!=null){            ListNode nex = cur.next;            while(pro.next!=null&amp;&amp;pro.next.val&lt;cur.val)                pro = pro.next;            cur.next = pro.next;            pro.next = cur;            pro = dummy;            cur = nex;        }        return dummy.next;    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;插入排序的基本介绍&quot;&gt;&lt;a href=&quot;#插入排序的基本介绍&quot; class=&quot;headerlink&quot; title=&quot;插入排序的基本介绍&quot;&gt;&lt;/a&gt;插入排序的基本介绍&lt;/h3&gt;&lt;p&gt;插入排序的时间复杂度为O(n*n),但是在 给定
      
    
    </summary>
    
      <category term="链表" scheme="https://9191rs.me/categories/%E9%93%BE%E8%A1%A8/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="leetcode" scheme="https://9191rs.me/tags/leetcode/"/>
    
      <category term="数据结构" scheme="https://9191rs.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 第149题  Max Points on a Line</title>
    <link href="https://9191rs.me/posts/33753/"/>
    <id>https://9191rs.me/posts/33753/</id>
    <published>2018-03-18T12:58:29.000Z</published>
    <updated>2018-08-01T11:12:25.871Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="题目要求："><a href="#题目要求：" class="headerlink" title="题目要求："></a>题目要求：</h2><p>给定2D平面上的n个点，找出位于同一条直线上的最大点数。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>这个问题的一种方案是考虑两点之间斜率，把斜率相同的点放置在一个表中，再找到包含最多点的斜率。这个其中有两点需要关注，一个是点坐标的取值范围，一个是涉及斜率计算的问题。<br>我的想法是对于每一个点，分别计算在它之后的所有不同点的斜率，并且用一个Map集合存起来，对于这个点，找出斜率最大的那个。考虑它的正确性，我们可以假设一种极端情况，即给定所有的点都在一条直线上，那么第一个点中肯定已经可以计算所要的结果，其他的点虽然能正常运行，但是同一个斜率得到结果肯定比第一个少。<br>这里还要指出的是，斜率计算的问题，当横坐标相同时，用Integer.MAX_VALUE表示。考虑到Double运算可能会出现精度溢出情况，采用了BigDecimal类来计算精确结果。</p><h2 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h2><pre><code>/** * Definition for a point. * class Point { *     int x; *     int y; *     Point() { x = 0; y = 0; } *     Point(int a, int b) { x = a; y = b; } * } */class Solution {    public  int maxPoints(Point[] points) {        int res = 1;        if(points.length==0) return 0;        for(int i =0;i&lt;points.length;i++){            HashMap&lt;Double,Integer&gt; hm = new HashMap&lt;&gt;();            hm.put((double) Integer.MIN_VALUE,1);//当points数组不空时，直线上必有一点            int de = 0;            for(int j=i+1;j&lt;points.length;j++){                if((points[i].y==points[j].y)&amp;&amp;(points[i].x==points[j].x)){                     de++;                }else{                    double tt = dis(points[i],points[j]);                    if(hm.containsKey(tt))                        hm.put(tt,hm.get(tt)+1);                    else                        hm.put(tt,2);                               }               }            for(int re:hm.values())                                 res  = Math.max(res, de+re);        }        return res;    }    public static double dis(Point p1, Point p2) {        if((p1.x-p2.x)==0)             return (double)Integer.MAX_VALUE;        if(p1.y==p2.y)             return 0;        java.math.BigDecimal bd1 = new java.math.BigDecimal(Double.toString(p1.y-p2.y));         java.math.BigDecimal bd2 = new java.math.BigDecimal(Double.toString(p1.x-p2.x));         return bd1.divide                 (bd2,16,java.math.BigDecimal.ROUND_HALF_UP).doubleValue();     }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;题目要求：&quot;&gt;&lt;a href=&quot;#题目要求：&quot; class=&quot;headerlink&quot; title=&quot;题目要求：&quot;&gt;&lt;/a&gt;题目要求：&lt;/h2&gt;&lt;p&gt;给定2D平面上的n个点，找出位于同一条直线上的最大点数。&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
      <category term="leetcode" scheme="https://9191rs.me/categories/leetcode/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="算法" scheme="https://9191rs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://9191rs.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode Two Sum问题</title>
    <link href="https://9191rs.me/posts/56041/"/>
    <id>https://9191rs.me/posts/56041/</id>
    <published>2018-03-18T12:19:36.000Z</published>
    <updated>2018-08-01T11:12:25.868Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ul><li><strong>Two Sum I</strong></li><li><strong>Two Sum II - Input array is sorted</strong></li></ul><hr><h2 id="第1题-Two-Sum-I"><a href="#第1题-Two-Sum-I" class="headerlink" title="第1题 Two Sum I"></a>第1题 Two Sum I</h2><p><strong>题目要求:</strong></p><blockquote><p>给定一个整数数组，返回这两个数字的索引，使它们合计成一个特定的目标。<br>限定条件：<br>返回值为这两个数字的索引，索引从0开始<br>假定每个输入都只有一个解，且不能使用相同的元素两次</p></blockquote><h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><p>由于数组有序，故采用对撞指针的方法。设置两个指针分别指向数组的头尾，当两个数的和大于给定的值时，右指针左移，小于时，左指针右移。这里需要注意的时，左指针必须小于右指针。</p><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><pre><code>public int[] twoSum(int[] nums, int target) {    int [] res = new int[2];    HashMap&lt;Integer,Integer&gt; tm = new HashMap&lt;&gt;();    for(int i =0;i&lt;nums.length;i++){        if(tm.containsKey(target - nums[i])){            res[0]=tm.get(target-nums[i]);            res[1]=i;        }else{            tm.put(nums[i],i);        }    }         return res;}</code></pre><h2 id="第167题Two-Sum-II"><a href="#第167题Two-Sum-II" class="headerlink" title="第167题Two Sum II"></a>第167题Two Sum II</h2><p><strong>题目要求:</strong></p><blockquote><p>给定已按升序排序的整数数组，找到两个数字，使它们合计为特定的目标数字。</p></blockquote><p><strong>限定条件</strong></p><p>返回值为这两个数字的索引，且该索引是从1开始</p><p>假定每个输入都只有一个解，且不能使用相同的元素两次</p><h4 id="解决思路-1"><a href="#解决思路-1" class="headerlink" title="解决思路"></a>解决思路</h4><p>由于数组可能无序，且要返回的是元素的索引。所以我想到的办法是利用Set集合建立一个查找表，遍历整个数组，每次放入一个新元素时，在表中查找是否有target - nums[i]，如果存在则返回相应的索引，反之则继续遍历。</p><h3 id="Java代码-1"><a href="#Java代码-1" class="headerlink" title="Java代码"></a>Java代码</h3><pre><code>public  int[] twoSum(int[] numbers, int target) {    int[] arr = new int[2];   int l = 0,r = numbers.length-1;   while(l&lt;r){    if(numbers[l]+numbers[r]&gt;target) r--;    else if(numbers[l]+numbers[r]&lt;target) l++;    else{        arr[0] = l+1;        arr[1] = r+1;        break;    }   }   return arr;}</code></pre><h3 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h3><p>对比上述两个题目可以看出，需要解决的问题几乎一致，但是由于给定条件不一样，数组是否有序，导致解决问题的思路也不一样，一般来说，上述两种方法也是比较常见的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Two Sum I&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Two Sum II - Input array is sorted&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;第
      
    
    </summary>
    
      <category term="leetcode" scheme="https://9191rs.me/categories/leetcode/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="算法" scheme="https://9191rs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://9191rs.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode76题 Minimum Window Substring</title>
    <link href="https://9191rs.me/posts/45681/"/>
    <id>https://9191rs.me/posts/45681/</id>
    <published>2018-03-11T12:16:31.000Z</published>
    <updated>2018-08-01T11:12:25.878Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="最小窗口子字符串"><a href="#最小窗口子字符串" class="headerlink" title="最小窗口子字符串"></a>最小窗口子字符串</h2><blockquote><p>题目要求：给定一个字符串S和T，在S中找到一个包含T中所有字符的最短字串，时间复杂度为O(n).<br>注1：如果这个窗口不存在，返回一个空字符串<br>注2：该题保证在S中总是只有一个唯一的最小窗口</p></blockquote><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a><strong>解决思路</strong></h3><p>采用滑动窗口的方法，首先定义一个HashMap集合，用来记录T中字符出现的次数，同时定义一个计数变量来统计所得到的字符串是否包含T中所有的字符。<br>具体做法为：当定义的滑动窗口的右指针不断向右滑动，找到包含T中所有字符的字串。然后通过控制窗口的滑动，尽可能的减少该字串的长度。</p><h3 id="Java语言解决方案"><a href="#Java语言解决方案" class="headerlink" title="Java语言解决方案"></a><strong>Java语言解决方案</strong></h3><pre><code>class Solution {    public String minWindow(String s, String t) {        if(s.length()&lt;t.length()) return &quot;&quot;;        char[] ss = s.toCharArray();        char[] tt = t.toCharArray();        int count = t.length();        String res = &quot;&quot;;        HashMap&lt;Character,Integer&gt; hm = new HashMap&lt;&gt;();        for(int i=0;i&lt;t.length();i++)            if(hm.containsKey(tt[i]))                hm.put(tt[i], hm.get(tt[i])+1);            else                hm.put(tt[i], 1);                       int l=0,r=0;        while(r&lt;s.length()){            if(hm.containsKey(ss[r])){                if(hm.get(ss[r])&gt;0)                    count--;                hm.put(ss[r], hm.get(ss[r])-1);            }         while(l&lt;=r&amp;&amp;count==0){                if(res.isEmpty()||res.length()&gt;(r-l+1))                    res = s.substring(l,r+1);                if(hm.containsKey(ss[l])){                    hm.put(ss[l], hm.get(ss[l])+1);                    if(hm.get(ss[l])&gt;0)                        count++;                }                l++;                                        }               r++;        }       return res;    }}</code></pre><hr><p>题目链接: <a href="https://leetcode.com/problems/minimum-window-substring/description/" target="_blank" rel="noopener">https://leetcode.com/problems/minimum-window-substring/description/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;最小窗口子字符串&quot;&gt;&lt;a href=&quot;#最小窗口子字符串&quot; class=&quot;headerlink&quot; title=&quot;最小窗口子字符串&quot;&gt;&lt;/a&gt;最小窗口子字符串&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;题目要求：给定一个字符串S和T
      
    
    </summary>
    
      <category term="leetcode" scheme="https://9191rs.me/categories/leetcode/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="算法" scheme="https://9191rs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://9191rs.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>算法中时间复杂度分析</title>
    <link href="https://9191rs.me/posts/8713/"/>
    <id>https://9191rs.me/posts/8713/</id>
    <published>2018-03-05T02:47:54.000Z</published>
    <updated>2018-08-01T11:12:25.887Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>算法的时间复杂度表示算法运行所需要的时间</p><ul><li><strong>大O表示法</strong></li><li><strong>递归算法中时间复杂度分析</strong></li></ul><hr><h2 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h2><p>大O表示法 是一种体现算法时间复杂度的记法，如果用n表示数据规模，那么O(f(n)表示算法说需要执行的指令数(消耗的时间)和 f(n) 成正比。大O表示法指出了算法执行的最低上限。(大O表示法的前边省略了一个常数)。</p><blockquote><p>例子：有一个字符数组，将数组中的每一个字符串按照字母排序，再将整个字符串数组按照字典序排序求这个算法的时间复杂度。<br>分析：假设每个字符串的最大长度是s，字符数组中一共有n个字符串。<br>* 对于一个字符串来说，进行排序的复杂度是O(s*log s),则整个字符数组的复杂度是O(n*s<em>log s)<br>\</em> 对于整个字符串数组排序的复杂度是O(n*log n)，而进行字典排序时每次最多进行s次比较，每次比较都是常数时间，所以复杂度是O(s*n<em>log n)<br>\</em> 综上：整个算法的复杂度是O(s*n*(log n +log s)</p></blockquote><p>常见的大O阶有常数阶O(1)，线性阶O(n)，平方阶O(n²)，对数阶O(logn)，nlogn阶O(nlogn)等等。如果有在有相同规模的n，则只保留最高阶，如O(n+n²) = O(n²)。</p><h4 id="线性阶"><a href="#线性阶" class="headerlink" title="线性阶"></a>线性阶</h4><p>随数据规模n线性增长。如下面的代码：</p><pre><code>for(int i=0;i&lt;n;i++){//时间复杂度为O(1)的算法...}       </code></pre><h4 id="对数阶"><a href="#对数阶" class="headerlink" title="对数阶"></a>对数阶</h4><p>接着看如下代码：</p><pre><code>int number=1;while(number&lt;n){    number=number*2;    //时间复杂度为O(1)的算法    ...}</code></pre><p>可以看出上面的代码，随着number每次乘以2后，都会越来越接近n，当number不小于n时就会退出循环。假设循环的次数为X，则由2^x=n得出x=log₂n，因此得出这个算法的时间复杂度为O(logn)。</p><h4 id="平方阶"><a href="#平方阶" class="headerlink" title="平方阶"></a>平方阶</h4><p>下面的代码是循环嵌套：</p><pre><code>for(int i=0;i&lt;n;i++){     for(int j=i;j&lt;n;j++){     //复杂度为O(1)的算法     ...       }  }</code></pre><p>需要注意的是内循环中int j=i，而不是int j=0。当i=0时，内循环执行了n次；i=1时内循环执行了n-1次，当i=n-1时执行了1次，我可以推算出总的执行次数为：</p><blockquote><p>n+(n-1)+(n-2)+(n-3)+……+1 = n²/2+n/2</p></blockquote><p>只保留最高阶，因此保留n²/2，并且去掉这个项的常数，1/2,最终这段代码的时间复杂度为O(n²)。</p><p>注意：<br>1.以下代码的复杂度仍为O(n)，原因是只进行了30*n次基本操作。</p><pre><code>for(int i=0;i&lt;n;i++){     for(int j=0;j&lt;30;j++){     //复杂度为O(1)的算法     ...       }  }</code></pre><p>2.以下代码的复杂度仍为O(n*log n)。</p><pre><code>for(int i=1;i&lt;n;i +=i){     for(int j=0;j&lt;n;j++){     //复杂度为O(1)的算法     ...       }  }</code></pre><h6 id="以上充分说明，应该时刻关注数据规模，而不是一些形式上的类似。"><a href="#以上充分说明，应该时刻关注数据规模，而不是一些形式上的类似。" class="headerlink" title="以上充分说明，应该时刻关注数据规模，而不是一些形式上的类似。"></a>以上充分说明，应该时刻关注数据规模，而不是一些形式上的类似。</h6><hr><h2 id="递归算法中时间复杂度分析"><a href="#递归算法中时间复杂度分析" class="headerlink" title="递归算法中时间复杂度分析"></a>递归算法中时间复杂度分析</h2><h3 id="递归中进行一次递归调用"><a href="#递归中进行一次递归调用" class="headerlink" title="递归中进行一次递归调用"></a>递归中进行一次递归调用</h3><p>如下图所示，该二分查找只进行了一次递归调用。每次调用的复杂度为O(1),递归深度为O(log n),<br>故整个算法的复杂度为O(log n)。<br><img src="/posts/8713/1.png" alt="这里写图片描述"></p><p>一般来说,在递归函数中只递归一次递归调用，总体的复杂度为O(每个递归函数的时间复杂度*递归深度)</p><h3 id="递归中进行多次递归调用"><a href="#递归中进行多次递归调用" class="headerlink" title="递归中进行多次递归调用"></a>递归中进行多次递归调用</h3><p>此时应该关注的是调用次数，如下面代码所示：此时可以通过数递归树上的节点。<br><img src="/posts/8713/2.png" alt="这里写图片描述"><br>比如当n=3时，它的递归树如下图 右半侧，更一般的结论如左半侧所示。<br><img src="/posts/8713/3.png" alt="这里写图片描述"></p><p>又比如，在归并排序中，排序的数据规模都会减少一半，所以递归深度时log n，但是每层进行排序的数据规模都是n,所以时间复杂度是O(n*log n).<br><img src="/posts/8713/4.png" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;算法的时间复杂度表示算法运行所需要的时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;大O表示法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;递归算法中时间复杂度分析&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=
      
    
    </summary>
    
      <category term="算法" scheme="https://9191rs.me/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="算法" scheme="https://9191rs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>判断链表成环，且找出环的起点</title>
    <link href="https://9191rs.me/posts/36499/"/>
    <id>https://9191rs.me/posts/36499/</id>
    <published>2017-11-28T13:14:00.000Z</published>
    <updated>2018-08-01T11:12:25.882Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="判断链表成环，且找出环的起点。"><a href="#判断链表成环，且找出环的起点。" class="headerlink" title="判断链表成环，且找出环的起点。"></a>判断链表成环，且找出环的起点。</h1><ul><li><strong>判断链表成环</strong></li><li><strong>找出环的起点</strong></li><li><strong>Java代码实现</strong></li></ul><hr><h2 id="1-判断链表是否成环"><a href="#1-判断链表是否成环" class="headerlink" title="1. 判断链表是否成环"></a>1. 判断链表是否成环</h2><blockquote><p>Floyd环判断法：从同一个起点同时开始以不同速度前进的2个指针最终相遇，那么可以判定存在一个环。</p></blockquote><p>设想：乌龟和兔子在同一个环上赛跑，跑的快的兔子速度为2，跑的慢的乌龟速度为1，则兔子终会赶上乌龟。</p><pre><code>理解：如果以乌龟为参考对象，则兔子前进的速度为1，这就意味着，兔子必将赶上乌龟。</code></pre><p>所以一个判断成环的方法是：先舍子两个指针都指向表头，其中p1每次前进一个节点，p2每次前进两个节点，且p1和p2同时走，当p2指向的地址为null，就证明链表没有环。如果在某个时刻，p1和p2指向的地址相同，那么链表就是有环的。</p><h2 id="2-找出环的起点"><a href="#2-找出环的起点" class="headerlink" title="2.找出环的起点"></a>2.找出环的起点</h2><p><img src="/posts/36499/1.jpg" alt="这里写图片描述"><br>同时可以进一步考虑：K1是等于零的，也就是p1在进入环后，走了不到一圈就在交点处和p2重合。因为p1在进入环的时候，p2和p1之间的距离（沿着行走方向）至多为 d2-1，不可能超过d2-1，因为环的大小也才只有d2 。p2追赶p1，最多只需要走d2-1步，因为每走一步，p1和p2的相对距离减小1，那么p1最多只走了d2-1步，就是最多只经过了d2-1个节点，不可能走完一圈。<br><img src="/posts/36499/2.jpg" alt="这里写图片描述"><br>最后推出的式子的含义可以理解为：d1的长度 = 环长度的整数倍 + 交点与环入口的距离<br>所以我们可以得出：当p1和p2相遇后，让p1回到原点，p2在相遇点，且两者每次都前进一个节点，当两者再次相遇时，就是环的起点。</p><h2 id="3-Java代码实现"><a href="#3-Java代码实现" class="headerlink" title="3. Java代码实现"></a>3. Java代码实现</h2><pre><code>int FindBeginLoop(ListNode head){    ListNode p1 = head, p2 = head;    boolean loopExists = false;    if(head == null)        return false;    //判断环是否存在    while(p2.getNext()!=null&amp;&amp;p2.getNext().getNext()!=null){        p1 = p1.getNext();        p2 = p2.getNext().getNext();        if(p1==p2)            loopExists = true;            break;    }    //如果环存在，寻找环的起点    if(loopExists){        p1 = head;        while(p1!=p2){            p1 = p1.getNext();            p2 = p2.getNext();        }        return p1;    }    return null; //不存在}//附：定义的LitNode类public class ListNode {    private int data;    private ListNode next;    public ListNode(int data) {        this.data = data;    }    public int getData() {        return data;    }    public void setData(int data) {        this.data = data;    }    public SingleListNode getNext() {        return next;    }    public void setNext(SingleListNode next) {        this.next = next;    }}</code></pre><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="http://www.cnblogs.com/snake-hand/p/3148328.html" target="_blank" rel="noopener">http://www.cnblogs.com/snake-hand/p/3148328.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;判断链表成环，且找出环的起点。&quot;&gt;&lt;a href=&quot;#判断链表成环，且找出环的起点。&quot; class=&quot;headerlink&quot; title=&quot;判断链表成环，且找出环的起点。&quot;&gt;&lt;/a&gt;判断链表成环，且找出环的起点。&lt;/h1&gt;&lt;ul
      
    
    </summary>
    
      <category term="链表" scheme="https://9191rs.me/categories/%E9%93%BE%E8%A1%A8/"/>
    
    
      <category term="Java" scheme="https://9191rs.me/tags/Java/"/>
    
      <category term="leetcode" scheme="https://9191rs.me/tags/leetcode/"/>
    
      <category term="数据结构" scheme="https://9191rs.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="https://9191rs.me/posts/7251/"/>
    <id>https://9191rs.me/posts/7251/</id>
    <published>2017-10-18T12:19:36.000Z</published>
    <updated>2018-08-05T14:27:44.828Z</updated>
    
    <content type="html"><![CDATA[<p class="description">搭建一个属于自己的博客</p><p><img src="/posts/7251/blog.png" alt="" style="width:100%"><br><a id="more"></a></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>一直想搭建一个属于自己的博客，但都没有付诸行动，直到看见@<a href="http://tengj.top/" target="_blank" rel="noopener">嘟嘟独立博客</a>所写的<br>一列的hexo教程，终于开始动起来，花了一天的时间完成了这个过程。<br>之后计划将自己以前写过的一些东西一点点搬运过来。</p><hr><h2 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h2><hr><p><strong>hexo配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site 网站</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">爱生活,爱柒柒</span><span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">且自前行，莫问归处！</span> <span class="comment">#网站描述</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">LI</span> <span class="string">Ren</span><span class="comment">#您的名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span><span class="comment">#网站使用的语言</span></span><br><span class="line"><span class="attr">timezone:</span><span class="comment">#网站时区。Hexo 默认使用您电脑的时区</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL 网址</span></span><br><span class="line"><span class="comment">## 如果您的网站存放在子目录中，</span></span><br><span class="line"><span class="comment">##例如 http://yoursite.com/blog，</span></span><br><span class="line"><span class="comment">##则将url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">url:</span> <span class="attr">https://myrens.github.io/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">  order_by:</span> <span class="bullet">-date</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改归档页面、某一分类页面、某一标签页面的显示篇数</span></span><br><span class="line"><span class="comment">## 参考：http://theme-next.iissnan.com/faqs.html#setting-page-size</span></span><br><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">  yearly:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  monthly:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  daily:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">category_generator:</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tag_generator:</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment"># RSS，要先进入站点文件夹根目录安装插件</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-feed --save 即可</span></span><br><span class="line"><span class="comment"># 无需更多配置</span></span><br><span class="line"><span class="comment"># 参数说明查看 README：https://github.com/hexojs/hexo-generator-feed</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="comment"># 文章数，0 为全部</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">  hub:</span></span><br><span class="line"><span class="comment"># 是否包含文章内容</span></span><br><span class="line"><span class="attr">  content:</span> <span class="literal">true</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">##commnet</span></span><br><span class="line"><span class="attr">disqus_shortname:</span> </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment"># MathJax Support</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  cdn:</span> <span class="string">//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Swiftype Search Key</span></span><br><span class="line"><span class="attr">swiftype_key:</span> <span class="string">tLXWKdsstE5UZFCodRRQ</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># emoji 支持</span></span><br><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  idName:</span> <span class="string">github-emoji</span></span><br><span class="line"><span class="attr">  unicode:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  styles:</span></span><br><span class="line"><span class="attr">  localEmojis:</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span> </span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span>  </span><br><span class="line">        <span class="string">git@github.com:LLLRS/LLLRS.github.io.git,master</span></span><br></pre></td></tr></table></figure><hr><h2 id="next主题配置"><a href="#next主题配置" class="headerlink" title="next主题配置"></a><strong>next主题配置</strong></h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ===============================================================</span></span><br><span class="line"><span class="comment"># ========================= ATTENTION! ==========================</span></span><br><span class="line"><span class="comment"># ===============================================================</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Theme Core Configuration Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set to true, if you want to fully override the default configuration.</span></span><br><span class="line"><span class="comment"># Useful if you don't want to inherit the theme _config.yml configurations.</span></span><br><span class="line"><span class="attr">override:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Site Information Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To get or check favicons visit: https://realfavicongenerator.net</span></span><br><span class="line"><span class="comment"># Put your favicons into `hexo-site/source/` (recommend) or `hexo-site/themes/next/source/images/` directory.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default NexT favicons placed in `hexo-site/themes/next/source/images/` directory.</span></span><br><span class="line"><span class="comment"># And if you want to place your icons in `hexo-site/source/` root directory, you must remove `/images` prefix from pathes.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For example, you put your favicons into `hexo-site/source/images` directory.</span></span><br><span class="line"><span class="comment"># Then need to rename &amp; redefine they on any other names, otherwise icons from Next will rewrite your custom icons in Hexo.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点图标啦，直接去 https://realfavicongenerator.net</span></span><br><span class="line"><span class="comment"># 选项弄好后，下载压缩包，解压复制粘贴</span></span><br><span class="line"><span class="comment"># 建议放在 hexo-site/source/images/ 里（没有自己建）</span></span><br><span class="line"><span class="comment"># 这样可以避免更新 NexT 主题的时候遇到麻烦</span></span><br><span class="line"><span class="comment"># 最后记得要稍微改下文件名，与下面的保持一致</span></span><br><span class="line"><span class="attr">favicon:</span></span><br><span class="line"><span class="attr">  small:</span> <span class="string">/images/favicon-16x16-next.png</span></span><br><span class="line"><span class="attr">  medium:</span> <span class="string">/images/favicon-32x32-next.png</span></span><br><span class="line"><span class="attr">  apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line"><span class="attr">  safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br><span class="line"><span class="attr">  android_manifest:</span> <span class="string">/images/manifest.json</span></span><br><span class="line"><span class="attr">  ms_browserconfig:</span> <span class="string">/images/browserconfig.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set default keywords (Use a comma to separate)</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">"Hexo, NexT, Java, Spring, ssm"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set rss to false to disable feed link.</span></span><br><span class="line"><span class="comment"># Leave rss as empty to use site's feed link.</span></span><br><span class="line"><span class="comment"># Set rss to specific value if you have burned your feed already.</span></span><br><span class="line"><span class="attr">rss:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup.</span></span><br><span class="line">  <span class="comment"># If not defined, current year will be used.</span></span><br><span class="line"><span class="attr">  since:</span> <span class="number">2015</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line"><span class="attr">  icon:</span> <span class="string">heart</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, will be used `author` from Hexo main config.</span></span><br><span class="line"><span class="attr">  copyright:</span></span><br><span class="line">  <span class="comment"># -------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line">  <span class="comment"># Hexo 的链接</span></span><br><span class="line"><span class="attr">  powered:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  theme:</span></span><br><span class="line">    <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line"><span class="attr">    version:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># -------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Any custom text can be defined here.</span></span><br><span class="line">  <span class="comment">#custom_text: Hosted by &lt;a target="_blank" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># SEO Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Canonical, set a canonical link tag in your hexo, you could use it for your SEO of blog.</span></span><br><span class="line"><span class="comment"># See: https://support.google.com/webmasters/answer/139066</span></span><br><span class="line"><span class="comment"># Tips: Before you open this tag, remember set up your URL in hexo _config.yml ( ex. url: http://yourdomain.com )</span></span><br><span class="line"><span class="attr">canonical:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Change headers hierarchy on site-subtitle (will be main site description) and on all post/pages titles for better SEO-optimization.</span></span><br><span class="line"><span class="attr">seo:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If true, will add site-subtitle to index page, added in main hexo config.</span></span><br><span class="line"><span class="comment"># subtitle: Subtitle</span></span><br><span class="line"><span class="attr">index_with_subtitle:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).</span></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimeter is the target link.</span></span><br><span class="line"><span class="comment"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.</span></span><br><span class="line"><span class="comment"># 菜单设置 || 菜单图标设置（图标上面说了，不重复）</span></span><br><span class="line"><span class="comment"># 项目换行可以更改显示顺序</span></span><br><span class="line"><span class="comment"># 如果这个项前会显示 .menu</span></span><br><span class="line"><span class="comment"># 解决方法：编辑 ~/blog/themes/next/languages 下的相应文件</span></span><br><span class="line"><span class="comment"># 比如添加一个“留言”菜单，站点配置文件的 language 是 zh-Hans</span></span><br><span class="line"><span class="comment"># 则编辑 zh-Hans.yml，在 menu: 项内添加一行 留言: 留言</span></span><br><span class="line"><span class="comment"># 注意空格，且符号 : 为英文字符！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line"><span class="attr">  commonweal:</span> <span class="string">/404/</span> <span class="string">||</span> <span class="string">heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable/Disable menu icons.</span></span><br><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Social Links.</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimeter is the target permalink.</span></span><br><span class="line"><span class="comment"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/LLLRS||</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  E-Mail:</span> <span class="number">15311257617</span><span class="string">@163.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class="line">  <span class="comment">#VK Group: https://vk.com/yourname || vk</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || skype</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  Github:</span> <span class="string">github</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_icon:</span> <span class="string">link</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">友情链接</span></span><br><span class="line"><span class="attr">links_layout:</span> <span class="string">block</span></span><br><span class="line"><span class="comment">#links_layout: inline</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="string">嘟嘟独立博客:</span> <span class="attr">http://tengj.top/</span></span><br><span class="line"><span class="attr">  crossoverjie:</span> <span class="attr">https://crossoverjie.top/</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="comment"># in theme directory(source/images): /images/avatar.gif</span></span><br><span class="line"><span class="comment"># in site  directory(source/uploads): /uploads/avatar.gif</span></span><br><span class="line"><span class="comment">#avatar: /images/avatar.gif</span></span><br><span class="line"><span class="comment"># 侧栏头像设置</span></span><br><span class="line"><span class="comment"># 圆形以及旋转效果在本文 4.2 节的代码里</span></span><br><span class="line"><span class="comment"># 点击回到博客首页教程见本文 5.13 节</span></span><br><span class="line"><span class="comment"># 建议放在 hexo-site/source/uploads/ 里（没有自己建）</span></span><br><span class="line"><span class="comment"># 这样可以避免更新 NexT 主题的时候遇到麻烦</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/uploads/logo.jpeg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Table Of Contents in the Sidebar</span></span><br><span class="line"><span class="comment"># 侧栏文章目录设置（前提是 Markdown 书写正确）</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line"><span class="attr">  number:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line"><span class="attr">  wrap:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># http://creativecommons.org/</span></span><br><span class="line"><span class="comment"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class="line"><span class="comment">#creative_commons: by-nc-sa</span></span><br><span class="line"><span class="comment">#creative_commons:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position, available value: left | right (only for Pisces | Gemini).</span></span><br><span class="line"><span class="attr">  position:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment">#position: right</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar Display, available value (only for Muse | Mist):</span></span><br><span class="line">  <span class="comment">#  - post    expand on posts automatically. Default.</span></span><br><span class="line">  <span class="comment">#  - always  expand for all pages automatically</span></span><br><span class="line">  <span class="comment">#  - hide    expand only when click on the sidebar toggle icon.</span></span><br><span class="line">  <span class="comment">#  - remove  Totally remove sidebar including sidebar toggle.</span></span><br><span class="line"><span class="attr">  display:</span> <span class="string">post</span></span><br><span class="line">  <span class="comment">#display: always</span></span><br><span class="line">  <span class="comment">#display: hide</span></span><br><span class="line">  <span class="comment">#display: remove</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span></span><br><span class="line"><span class="attr">  offset:</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Back to top in sidebar (only for Pisces | Gemini).</span></span><br><span class="line"><span class="attr">  b2t:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line"><span class="attr">  scrollpercent:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Enable sidebar on narrow view (only for Muse | Mist).</span></span><br><span class="line"><span class="attr">  onmobile:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Post Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically scroll page to section which is under &lt;!-- more --&gt; mark.</span></span><br><span class="line"><span class="attr">scroll_to_more:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically saving scroll position on each post/page in cookies.</span></span><br><span class="line"><span class="attr">save_scroll:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically excerpt description in homepage as preamble text.</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically Excerpt. Not recommend.</span></span><br><span class="line"><span class="comment"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  length:</span> <span class="number">150</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  created_at:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  updated_at:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="comment"># 显示统计字数和估计阅读时长</span></span><br><span class="line"><span class="comment"># 注意：这个要安装插件，先进入站点文件夹根目录</span></span><br><span class="line"><span class="comment"># 然后：npm install hexo-wordcount --save</span></span><br><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  wordcount:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  min2read:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  totalcount:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Wechat Subscriber</span></span><br><span class="line"><span class="comment">#wechat_subscriber:</span></span><br><span class="line">  <span class="comment">#enabled: true</span></span><br><span class="line">  <span class="comment">#qcode: /path/to/your/wechatqcode ex. /uploads/wechat-qcode.jpg</span></span><br><span class="line">  <span class="comment">#description: ex. subscribe to my blog by scanning my public wechat account</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reward</span></span><br><span class="line"><span class="attr">reward_comment:</span> <span class="string">欢迎一起进行交流！</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="string">/images/wechat.jpg</span></span><br><span class="line"><span class="comment">#alipay: /images/alipay.jpg</span></span><br><span class="line"><span class="comment">#bitcoin: /images/bitcoin.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Declare license on posts</span></span><br><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">3.0</span></span><br><span class="line"><span class="attr">  license_url:</span> <span class="attr">https://creativecommons.org/licenses/by-nc-sa/3.0/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Misc Theme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reduce padding / margin indents on devices with narrow width.</span></span><br><span class="line"><span class="attr">mobile_layout_economy:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Android Chrome header panel color ($black-deep).</span></span><br><span class="line"><span class="attr">android_chrome_color:</span> <span class="string">"#222"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Custom Logo.</span></span><br><span class="line"><span class="comment"># !!Only available for Default Scheme currently.</span></span><br><span class="line"><span class="comment"># Options:</span></span><br><span class="line"><span class="comment">#   enabled: [true/false] - Replace with specific image</span></span><br><span class="line"><span class="comment">#   image: url-of-image   - Images's url</span></span><br><span class="line"><span class="attr">custom_logo:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  image:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Code Highlight theme</span></span><br><span class="line"><span class="comment"># Available value:</span></span><br><span class="line"><span class="comment">#    normal | night | night eighties | night blue | night bright</span></span><br><span class="line"><span class="comment"># https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">normal</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Font Settings</span></span><br><span class="line"><span class="comment"># - Find fonts on Google Fonts (https://www.google.com/fonts)</span></span><br><span class="line"><span class="comment"># - All fonts set here will have the following styles:</span></span><br><span class="line"><span class="comment">#     light, light italic, normal, normal italic, bold, bold italic</span></span><br><span class="line"><span class="comment"># - Be aware that setting too much fonts will cause site running slowly</span></span><br><span class="line"><span class="comment"># - Introduce in 5.0.1</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># CAUTION! Safari Version 10.1.2 <span class="doctag">bug:</span> https://github.com/iissnan/hexo-theme-next/issues/1844</span></span><br><span class="line"><span class="comment"># To avoid space between header and sidebar in Pisces / Gemini themes recommended to use Web Safe fonts for `global` (and `logo`):</span></span><br><span class="line"><span class="comment"># Arial | Tahoma | Helvetica | Times New Roman | Courier New | Verdana | Georgia | Palatino | Garamond | Comic Sans MS | Trebuchet MS</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Uri of fonts host. E.g. //fonts.googleapis.com (Default).</span></span><br><span class="line"><span class="attr">  host:</span> <span class="attr">https://fonts.cat.net</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: xx`. Use `px` as unit.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Global font settings used on &lt;body&gt; element.</span></span><br><span class="line"><span class="attr">  global:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Lato</span></span><br><span class="line"><span class="attr">    size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for Headlines (h1, h2, h3, h4, h5, h6).</span></span><br><span class="line">  <span class="comment"># Fallback to `global` font settings.</span></span><br><span class="line"><span class="attr">  headings:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Roboto</span> <span class="string">Slab</span></span><br><span class="line"><span class="attr">    size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts.</span></span><br><span class="line">  <span class="comment"># Fallback to `global` font settings.</span></span><br><span class="line"><span class="attr">  posts:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> </span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for Logo.</span></span><br><span class="line">  <span class="comment"># Fallback to `global` font settings.</span></span><br><span class="line"><span class="attr">  logo:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span></span><br><span class="line"><span class="attr">    size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line"><span class="attr">  codes:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Roboto</span> <span class="string">Mono</span></span><br><span class="line"><span class="attr">    size:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Third Party Services Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MathJax Support</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  cdn:</span> <span class="string">//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Han Support docs: https://hanzi.pro/</span></span><br><span class="line"><span class="attr">han:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Swiftype Search API Key</span></span><br><span class="line"><span class="comment">#swiftype_key:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Baidu Analytics ID</span></span><br><span class="line"><span class="comment">#baidu_analytics:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Duoshuo ShortName</span></span><br><span class="line"><span class="comment">#duoshuo_shortname:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disqus</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  shortname:</span></span><br><span class="line"><span class="attr">  count:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hypercomments</span></span><br><span class="line"><span class="comment">#hypercomments_id:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># changyan</span></span><br><span class="line"><span class="attr">changyan:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  appid:</span></span><br><span class="line"><span class="attr">  appkey:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Valine.</span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class="line"><span class="comment"># more info please open https://valine.js.org</span></span><br><span class="line"><span class="comment">#  app_id: oilMyKSMaPtFHPbgcbiCfJL6-gzGzoHsz</span></span><br><span class="line"><span class="comment">#  app_key: oUBvV1jEzR3mJ3RvgWoHex8G</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  appid:</span> <span class="string">oilMyKSMaPtFHPbgcbiCfJL6-gzGzoHsz</span>   </span><br><span class="line"><span class="attr">  appkey:</span> <span class="string">oUBvV1jEzR3mJ3RvgWoHex8G</span>  </span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">true</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">true</span> <span class="comment"># Verification code</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># comment box placeholder</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Support for youyan comments system.</span></span><br><span class="line"><span class="comment"># You can get your uid from http://www.uyan.cc</span></span><br><span class="line"><span class="comment">#youyan_uid: your uid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Support for LiveRe comments system.</span></span><br><span class="line"><span class="comment"># You can get your uid from https://livere.com/insight/myCode (General web site)</span></span><br><span class="line"><span class="comment">#livere_uid: your uid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Gitment</span></span><br><span class="line"><span class="comment"># Introduction: https://imsun.net/posts/gitment-introduction/</span></span><br><span class="line"><span class="comment"># You can get your Github ID from https://api.github.com/users/&lt;Github username&gt;</span></span><br><span class="line"><span class="attr">gitment:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  mint:</span> <span class="literal">true</span> <span class="comment"># RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span></span><br><span class="line"><span class="attr">  count:</span> <span class="literal">true</span> <span class="comment"># Show comments count in post meta area</span></span><br><span class="line"><span class="attr">  lazy:</span> <span class="literal">false</span> <span class="comment"># Comments lazy loading with a button</span></span><br><span class="line"><span class="attr">  cleanly:</span> <span class="literal">false</span> <span class="comment"># Hide 'Powered by ...' on footer, and more</span></span><br><span class="line"><span class="attr">  language:</span> <span class="comment"># Force language, or auto switch by theme</span></span><br><span class="line"><span class="attr">  github_user:</span> <span class="comment"># MUST HAVE, Your Github ID</span></span><br><span class="line"><span class="attr">  github_repo:</span> <span class="comment"># MUST HAVE, The repo you use to store Gitment comments</span></span><br><span class="line"><span class="attr">  client_id:</span> <span class="comment"># MUST HAVE, Github client id for the Gitment</span></span><br><span class="line"><span class="attr">  client_secret:</span> <span class="comment"># EITHER this or proxy_gateway, Github access secret token for the Gitment</span></span><br><span class="line"><span class="attr">  proxy_gateway:</span> <span class="comment"># Address of api proxy, See: https://github.com/aimingoo/intersect</span></span><br><span class="line"><span class="attr">  redirect_protocol:</span> <span class="comment"># Protocol of redirect_uri with force_redirect_protocol when mint enabled</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Baidu Share</span></span><br><span class="line"><span class="comment"># Available value:</span></span><br><span class="line"><span class="comment">#    button | slide</span></span><br><span class="line"><span class="comment"># Warning: Baidu Share does not support https.</span></span><br><span class="line"><span class="comment">#baidushare:</span></span><br><span class="line"><span class="comment">##  type: button</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Share</span></span><br><span class="line"><span class="comment"># This plugin is more useful in China, make sure you known how to use it.</span></span><br><span class="line"><span class="comment"># And you can find the use guide at official webiste: http://www.jiathis.com/.</span></span><br><span class="line"><span class="comment"># Warning: JiaThis does not support https.</span></span><br><span class="line"><span class="comment">#jiathis:</span></span><br><span class="line">  <span class="comment">##uid: Get this uid from http://www.jiathis.com/</span></span><br><span class="line"><span class="comment">#add_this_id:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Share</span></span><br><span class="line"><span class="comment">#duoshuo_share: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NeedMoreShare2</span></span><br><span class="line"><span class="comment"># This plugin is a pure javascript sharing lib which is useful in China.</span></span><br><span class="line"><span class="comment"># See: https://github.com/revir/need-more-share2</span></span><br><span class="line"><span class="comment"># Also see: https://github.com/DzmVasileusky/needShareButton</span></span><br><span class="line"><span class="comment"># iconStyle: default | box</span></span><br><span class="line"><span class="comment"># boxForm: horizontal | vertical</span></span><br><span class="line"><span class="comment"># position: top / middle / bottom + Left / Center / Right</span></span><br><span class="line"><span class="comment"># networks: Weibo,Wechat,Douban,QQZone,Twitter,Linkedin,Mailto,Reddit,</span></span><br><span class="line"><span class="comment">#           Delicious,StumbleUpon,Pinterest,Facebook,GooglePlus,Slashdot,</span></span><br><span class="line"><span class="comment">#           Technorati,Posterous,Tumblr,GoogleBookmarks,Newsvine,</span></span><br><span class="line"><span class="comment">#           Evernote,Friendfeed,Vkontakte,Odnoklassniki,Mailru</span></span><br><span class="line"><span class="attr">needmoreshare2:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  postbottom:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    options:</span></span><br><span class="line"><span class="attr">      iconStyle:</span> <span class="string">box</span></span><br><span class="line"><span class="attr">      boxForm:</span> <span class="string">horizontal</span></span><br><span class="line"><span class="attr">      position:</span> <span class="string">bottomCenter</span></span><br><span class="line"><span class="attr">      networks:</span> <span class="string">Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span></span><br><span class="line"><span class="attr">  float:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    options:</span></span><br><span class="line"><span class="attr">      iconStyle:</span> <span class="string">box</span></span><br><span class="line"><span class="attr">      boxForm:</span> <span class="string">horizontal</span></span><br><span class="line"><span class="attr">      position:</span> <span class="string">middleRight</span></span><br><span class="line"><span class="attr">      networks:</span> <span class="string">Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters/</span></span><br><span class="line"><span class="comment">#google_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Analytics</span></span><br><span class="line"><span class="comment">#google_analytics:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bing Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># See: https://www.bing.com/webmaster/</span></span><br><span class="line"><span class="comment">#bing_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Yandex Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># See: https://webmaster.yandex.ru/</span></span><br><span class="line"><span class="comment">#yandex_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CNZZ count</span></span><br><span class="line"><span class="comment">#cnzz_siteid:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Application Insights</span></span><br><span class="line"><span class="comment"># See https://azure.microsoft.com/en-us/services/application-insights/</span></span><br><span class="line"><span class="comment"># application_insights:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Make duoshuo show UA</span></span><br><span class="line"><span class="comment"># user_id must NOT be null when admin_enable is true!</span></span><br><span class="line"><span class="comment"># you can visit http://dev.duoshuo.com get duoshuo user id.</span></span><br><span class="line"><span class="attr">duoshuo_info:</span></span><br><span class="line"><span class="attr">  ua_enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  admin_enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  user_id:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment">#admin_nickname: Author</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Post widgets &amp; FB/VK comments settings.</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Facebook SDK Support.</span></span><br><span class="line"><span class="comment"># https://github.com/iissnan/hexo-theme-next/pull/410</span></span><br><span class="line"><span class="attr">facebook_sdk:</span></span><br><span class="line"><span class="attr">  enable:</span>       <span class="literal">false</span></span><br><span class="line"><span class="attr">  app_id:</span>       <span class="comment">#&lt;app_id&gt;</span></span><br><span class="line"><span class="attr">  fb_admin:</span>     <span class="comment">#&lt;user_id&gt;</span></span><br><span class="line"><span class="attr">  like_button:</span>  <span class="comment">#true</span></span><br><span class="line"><span class="attr">  webmaster:</span>    <span class="comment">#true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Facebook comments plugin</span></span><br><span class="line"><span class="comment"># This plugin depends on Facebook SDK.</span></span><br><span class="line"><span class="comment"># If facebook_sdk.enable is false, Facebook comments plugin is unavailable.</span></span><br><span class="line"><span class="attr">facebook_comments_plugin:</span></span><br><span class="line"><span class="attr">  enable:</span>       <span class="literal">false</span></span><br><span class="line"><span class="attr">  num_of_posts:</span> <span class="number">10</span>    <span class="comment"># min posts num is 1</span></span><br><span class="line"><span class="attr">  width:</span>        <span class="number">100</span><span class="string">%</span>  <span class="comment"># default width is 550px</span></span><br><span class="line"><span class="attr">  scheme:</span>       <span class="string">light</span> <span class="comment"># default scheme is light (light or dark)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># VKontakte API Support.</span></span><br><span class="line"><span class="comment"># To get your AppID visit https://vk.com/editapp?act=create</span></span><br><span class="line"><span class="attr">vkontakte_api:</span></span><br><span class="line"><span class="attr">  enable:</span>       <span class="literal">false</span></span><br><span class="line"><span class="attr">  app_id:</span>       <span class="comment">#&lt;app_id&gt;</span></span><br><span class="line"><span class="attr">  like:</span>         <span class="literal">true</span></span><br><span class="line"><span class="attr">  comments:</span>     <span class="literal">true</span></span><br><span class="line"><span class="attr">  num_of_posts:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Star rating support to each article.</span></span><br><span class="line"><span class="comment"># To get your ID visit https://widgetpack.com</span></span><br><span class="line"><span class="attr">rating:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  id:</span>     <span class="comment">#&lt;app_id&gt;</span></span><br><span class="line"><span class="attr">  color:</span>  <span class="string">fc6423</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># You can visit https://leancloud.cn get AppID and AppKey.</span></span><br><span class="line"><span class="comment"># 可以显示每篇文章的阅读量</span></span><br><span class="line"><span class="comment"># 然后可以通过阅读量建立 TopX 页面，教程链接：</span></span><br><span class="line"><span class="comment"># https://notes.wanghao.work/2015-10-21-为NexT主题添加文章阅读量统计功能.html</span></span><br><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  app_id:</span> <span class="string">oilMyKSMaPtFHPbgcbiCfJL6-gzGzoHsz</span></span><br><span class="line"><span class="attr">  app_key:</span> <span class="string">oUBvV1jEzR3mJ3RvgWoHex8G</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Another tool to show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># visit https://console.firebase.google.com/u/0/ to get apiKey and projectId</span></span><br><span class="line"><span class="comment"># visit https://firebase.google.com/docs/firestore/ to get more information about firestore</span></span><br><span class="line"><span class="attr">firestore:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  collection:</span> <span class="string">articles</span> <span class="comment">#required, a string collection name to access firestore database</span></span><br><span class="line"><span class="attr">  apiKey:</span> <span class="comment">#required</span></span><br><span class="line"><span class="attr">  projectId:</span> <span class="comment">#required</span></span><br><span class="line"><span class="attr">  bluebird:</span> <span class="literal">false</span> <span class="comment">#enable this if you want to include bluebird 3.5.1(core version) Promise polyfill</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show PV/UV of the website/page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="comment"># 不蒜子统计，用于在页脚显示总访客数和总浏览量，将 false 改为 true 就能直接使用</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="comment"># count values only if the other configs are false</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># custom uv span for the whole site</span></span><br><span class="line"><span class="attr">  site_uv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  site_uv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-user"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="attr">  site_uv_footer:</span></span><br><span class="line">  <span class="comment"># custom pv span for the whole site</span></span><br><span class="line"><span class="attr">  site_pv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  site_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-eye"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="attr">  site_pv_footer:</span></span><br><span class="line">  <span class="comment"># custom pv span for one page only</span></span><br><span class="line"><span class="attr">  page_pv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  page_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-file-o"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="attr">  page_pv_footer:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tencent analytics ID</span></span><br><span class="line"><span class="comment"># tencent_analytics:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tencent MTA ID</span></span><br><span class="line"><span class="comment"># tencent_mta:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</span></span><br><span class="line"><span class="attr">baidu_push:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Calendar</span></span><br><span class="line"><span class="comment"># Share your recent schedule to others via calendar page</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># API Documentation:</span></span><br><span class="line"><span class="comment"># https://developers.google.com/google-apps/calendar/v3/reference/events/list</span></span><br><span class="line"><span class="attr">calendar:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  calendar_id:</span> <span class="string">&lt;required&gt;</span></span><br><span class="line"><span class="attr">  api_key:</span> <span class="string">&lt;required&gt;</span></span><br><span class="line"><span class="attr">  orderBy:</span> <span class="string">startTime</span></span><br><span class="line"><span class="attr">  offsetMax:</span> <span class="number">24</span></span><br><span class="line"><span class="attr">  offsetMin:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">  timeZone:</span></span><br><span class="line"><span class="attr">  showDeleted:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  singleEvents:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  maxResults:</span> <span class="number">250</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Algolia Search</span></span><br><span class="line"><span class="attr">algolia_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  hits:</span></span><br><span class="line"><span class="attr">    per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line"><span class="attr">    hits_empty:</span> <span class="string">"We didn't find any results for the search: $&#123;query&#125;"</span></span><br><span class="line"><span class="attr">    hits_stats:</span> <span class="string">"$&#123;hits&#125; results found in $&#123;time&#125; ms"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/flashlab/hexo-generator-search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line"><span class="attr">  trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line"><span class="attr">  top_n_per_article:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Tags Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># External URL with BASE64 encrypt &amp; decrypt.</span></span><br><span class="line"><span class="comment"># Usage: &#123;% exturl text url "title" %&#125;</span></span><br><span class="line"><span class="comment"># Alias: &#123;% extlink text url "title" %&#125;</span></span><br><span class="line"><span class="attr">exturl:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note tag (bs-callout).</span></span><br><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line"><span class="attr">  style:</span> <span class="string">flat</span></span><br><span class="line"><span class="attr">  icons:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="attr">  light_bg_offset:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Label tag.</span></span><br><span class="line"><span class="attr">label:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tabs tag.</span></span><br><span class="line"><span class="attr">tabs:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  transition:</span></span><br><span class="line"><span class="attr">    tabs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    labels:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  border_radius:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#! ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#! DO NOT EDIT THE FOLLOWING SETTINGS</span></span><br><span class="line"><span class="comment">#! UNLESS YOU KNOW WHAT YOU ARE DOING</span></span><br><span class="line"><span class="comment">#! ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use velocity to animate everything.</span></span><br><span class="line"><span class="attr">motion:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  async:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  transition:</span></span><br><span class="line">    <span class="comment"># Transition variants:</span></span><br><span class="line">    <span class="comment"># fadeIn | fadeOut | flipXIn | flipXOut | flipYIn | flipYOut | flipBounceXIn | flipBounceXOut | flipBounceYIn | flipBounceYOut</span></span><br><span class="line">    <span class="comment"># swoopIn | swoopOut | whirlIn | whirlOut | shrinkIn | shrinkOut | expandIn | expandOut</span></span><br><span class="line">    <span class="comment"># bounceIn | bounceOut | bounceUpIn | bounceUpOut | bounceDownIn | bounceDownOut | bounceLeftIn | bounceLeftOut | bounceRightIn | bounceRightOut</span></span><br><span class="line">    <span class="comment"># slideUpIn | slideUpOut | slideDownIn | slideDownOut | slideLeftIn | slideLeftOut | slideRightIn | slideRightOut</span></span><br><span class="line">    <span class="comment"># slideUpBigIn | slideUpBigOut | slideDownBigIn | slideDownBigOut | slideLeftBigIn | slideLeftBigOut | slideRightBigIn | slideRightBigOut</span></span><br><span class="line">    <span class="comment"># perspectiveUpIn | perspectiveUpOut | perspectiveDownIn | perspectiveDownOut | perspectiveLeftIn | perspectiveLeftOut | perspectiveRightIn | perspectiveRightOut</span></span><br><span class="line"><span class="attr">    post_block:</span> <span class="string">fadeIn</span></span><br><span class="line"><span class="attr">    post_header:</span> <span class="string">fadeIn</span></span><br><span class="line"><span class="attr">    post_body:</span> <span class="string">fadeIn</span></span><br><span class="line"><span class="attr">    coll_header:</span> <span class="string">slideLeftIn</span></span><br><span class="line">    <span class="comment"># Only for Pisces | Gemini.</span></span><br><span class="line"><span class="attr">    sidebar:</span> <span class="string">slideUpIn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fancybox</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Progress bar in the top during page loading.</span></span><br><span class="line"><span class="comment"># 页面顶部加载条</span></span><br><span class="line"><span class="attr">pace:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Themes list:</span></span><br><span class="line"><span class="comment">#pace-theme-big-counter</span></span><br><span class="line"><span class="comment">#pace-theme-bounce</span></span><br><span class="line"><span class="comment">#pace-theme-barber-shop</span></span><br><span class="line"><span class="comment">#pace-theme-center-atom</span></span><br><span class="line"><span class="comment">#pace-theme-center-circle</span></span><br><span class="line"><span class="comment">#pace-theme-center-radar</span></span><br><span class="line"><span class="comment">#pace-theme-center-simple</span></span><br><span class="line"><span class="comment">#pace-theme-corner-indicator</span></span><br><span class="line"><span class="comment">#pace-theme-fill-left</span></span><br><span class="line"><span class="comment">#pace-theme-flash</span></span><br><span class="line"><span class="comment">#pace-theme-loading-bar</span></span><br><span class="line"><span class="comment">#pace-theme-mac-osx</span></span><br><span class="line"><span class="comment">#pace-theme-minimal</span></span><br><span class="line"><span class="comment"># For example</span></span><br><span class="line"><span class="comment"># pace_theme: pace-theme-center-simple</span></span><br><span class="line"><span class="attr">pace_theme:</span> <span class="string">pace-theme-flash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Only fit scheme Pisces</span></span><br><span class="line"><span class="comment"># Canvas-ribbon</span></span><br><span class="line"><span class="comment"># size: The width of the ribbon.</span></span><br><span class="line"><span class="comment"># alpha: The transparency of the ribbon.</span></span><br><span class="line"><span class="comment"># zIndex: The display level of the ribbon.</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  size:</span> <span class="number">300</span></span><br><span class="line"><span class="attr">  alpha:</span> <span class="number">0.6</span></span><br><span class="line"><span class="attr">  zIndex:</span> <span class="bullet">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Script Vendors.</span></span><br><span class="line"><span class="comment"># Set a CDN address for the vendor you want to customize.</span></span><br><span class="line"><span class="comment"># For example</span></span><br><span class="line"><span class="comment">#    jquery: https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js</span></span><br><span class="line"><span class="comment"># Be aware that you should use the same version as internal ones to avoid potential problems.</span></span><br><span class="line"><span class="comment"># Please use the https protocol of CDN files when you enable https on your site.</span></span><br><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="comment"># Internal path prefix. Please do not edit it.</span></span><br><span class="line"><span class="attr">  _internal:</span> <span class="string">lib</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 2.1.3</span></span><br><span class="line"><span class="attr">  jquery:</span> <span class="attr">https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 2.1.5</span></span><br><span class="line">  <span class="comment"># See: http://fancyapps.com/fancybox/</span></span><br><span class="line">  <span class="comment"># 自定义 fancybox（暂时）</span></span><br><span class="line"><span class="attr">  fancybox:</span> <span class="attr">https://cdnjs.cloudflare.com/ajax/libs/fancybox/3.2.5/jquery.fancybox.min.js</span></span><br><span class="line"><span class="attr">  fancybox_css:</span> <span class="attr">https://cdnjs.cloudflare.com/ajax/libs/fancybox/3.2.5/jquery.fancybox.min.css</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.0.6</span></span><br><span class="line">  <span class="comment"># See: https://github.com/ftlabs/fastclick</span></span><br><span class="line"><span class="attr">  fastclick:</span> <span class="attr">https://cdnjs.cloudflare.com/ajax/libs/fastclick/1.0.6/fastclick.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.9.7</span></span><br><span class="line">  <span class="comment"># See: https://github.com/tuupola/jquery_lazyload</span></span><br><span class="line"><span class="attr">  lazyload:</span> <span class="attr">https://cdnjs.cloudflare.com/ajax/libs/jquery_lazyload/1.9.7/jquery.lazyload.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.2.1</span></span><br><span class="line">  <span class="comment"># See: http://VelocityJS.org</span></span><br><span class="line"><span class="attr">  velocity:</span> <span class="attr">https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.1/velocity.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.2.1</span></span><br><span class="line">  <span class="comment"># See: http://VelocityJS.org</span></span><br><span class="line"><span class="attr">  velocity_ui:</span> <span class="attr">https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.1/velocity.ui.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 0.7.9</span></span><br><span class="line">  <span class="comment"># See: https://faisalman.github.io/ua-parser-js/</span></span><br><span class="line"><span class="attr">  ua_parser:</span> <span class="attr">https://cdnjs.cloudflare.com/ajax/libs/UAParser.js/0.7.9/ua-parser.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 4.6.2</span></span><br><span class="line">  <span class="comment"># See: http://fontawesome.io/</span></span><br><span class="line"><span class="attr">  fontawesome:</span> <span class="attr">https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.css</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.0.2</span></span><br><span class="line">  <span class="comment"># See: https://github.com/HubSpot/pace</span></span><br><span class="line">  <span class="comment"># Or use direct links below:</span></span><br><span class="line"><span class="attr">  pace:</span> <span class="string">//cdn.bootcss.com/pace/1.0.2/pace.min.js</span></span><br><span class="line"><span class="attr">  pace_css:</span> <span class="string">//cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.0.0</span></span><br><span class="line">  <span class="comment"># https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line"><span class="attr">  canvas_nest:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># three</span></span><br><span class="line"><span class="attr">  three:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># three_waves</span></span><br><span class="line">  <span class="comment"># https://github.com/jjandxa/three_waves</span></span><br><span class="line"><span class="attr">  three_waves:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># three_waves</span></span><br><span class="line">  <span class="comment"># https://github.com/jjandxa/canvas_lines</span></span><br><span class="line"><span class="attr">  canvas_lines:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># three_waves</span></span><br><span class="line">  <span class="comment"># https://github.com/jjandxa/canvas_sphere</span></span><br><span class="line"><span class="attr">  canvas_sphere:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 1.0.0</span></span><br><span class="line">  <span class="comment"># https://github.com/zproo/canvas-ribbon</span></span><br><span class="line"><span class="attr">  canvas_ribbon:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Internal version: 3.3.0</span></span><br><span class="line">  <span class="comment"># https://github.com/ethantw/Han</span></span><br><span class="line"><span class="attr">  han:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># needMoreShare2</span></span><br><span class="line">  <span class="comment"># https://github.com/revir/need-more-share2</span></span><br><span class="line"><span class="attr">  needMoreShare2:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Assets</span></span><br><span class="line"><span class="attr">css:</span> <span class="string">css</span></span><br><span class="line"><span class="attr">js:</span> <span class="string">js</span></span><br><span class="line"><span class="attr">images:</span> <span class="string">images</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Theme version</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">5.1</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><hr><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢<a href="http://tengj.top/" target="_blank" rel="noopener">嘟嘟独立博客</a>。<br>感谢<a href="https://reuixiy.github.io/" target="_blank" rel="noopener">reuixiy</a>,这篇<a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.htm" target="_blank" rel="noopener">文章</a>记录的十分详细。</p><hr>]]></content>
    
    <summary type="html">
    
      搭建一个属于自己的博客
    
    </summary>
    
      <category term="hexo" scheme="https://9191rs.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://9191rs.me/tags/hexo/"/>
    
      <category term="Next" scheme="https://9191rs.me/tags/Next/"/>
    
      <category term="配置" scheme="https://9191rs.me/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
